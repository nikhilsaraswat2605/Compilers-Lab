-------------------- Parsing Line No. 1  --------------------


-------------------- Line No. 2 getting parsed  --------------------


-------------------- Line No. 3 getting parsed  --------------------


-------------------- Line No. 4 getting parsed  --------------------


-------------------- Line No. 5 getting parsed  --------------------


-------------------- Line No. 6 getting parsed  --------------------

[Line No. 6] :: function_specifier ---> inline
[Line No. 6] :: type_specifier ---> int
[Line No. 6] :: declaration_specifiers_opt ---> epsilon 
[Line No. 6] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 6] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 6] :: declaration_specifiers ---> function_specifier declaration_specifiers_opt
[Line No. 6] :: pointer_opt ---> epsilon
[Line No. 6] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = power
[Line No. 6] :: type_specifier ---> double
[Line No. 6] :: declaration_specifiers_opt ---> epsilon 
[Line No. 6] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 6] :: type_qualifier ---> restrict
[Line No. 6] :: type_qualifier_list ---> type_qualifier
[Line No. 6] :: type_qualifier_list_opt ---> type_qualifier_list
[Line No. 6] :: pointer ---> * type_qualifier_list_opt
[Line No. 6] :: pointer_opt ---> pointer
[Line No. 6] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = p
[Line No. 6] :: declarator ---> pointer_opt direct_declarator
[Line No. 6] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 6] :: parameter_list ---> parameter_declaration
[Line No. 6] :: type_qualifier ---> volatile
[Line No. 6] :: declaration_specifiers_opt ---> epsilon 
[Line No. 6] :: declaration_specifiers ---> type_qualifier declaration_specifiers_opt
[Line No. 6] :: pointer_opt ---> epsilon
[Line No. 6] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = vol
[Line No. 6] :: declarator ---> pointer_opt direct_declarator
[Line No. 6] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 6] :: parameter_list ---> parameter_list , parameter_declaration
[Line No. 6] :: parameter_type_list ---> parameter_list , ...
[Line No. 6] :: direct_declarator ---> direct_declarator ( parameter_type_list )

-------------------- Line No. 7 getting parsed  --------------------

[Line No. 7] :: declarator ---> pointer_opt direct_declarator
[Line No. 7] :: declaration_list_opt ---> epsilon

-------------------- Line No. 8 getting parsed  --------------------

[Line No. 8] :: storage_class_specifier ---> auto
[Line No. 8] :: declaration_specifiers_opt ---> epsilon 
[Line No. 8] :: declaration_specifiers ---> storage_class_specifier declaration_specifiers_opt
[Line No. 8] :: pointer_opt ---> epsilon
[Line No. 8] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 8] :: declarator ---> pointer_opt direct_declarator
[Line No. 8] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 8] :: postfix_expression ---> primary_expression
[Line No. 8] :: unary_expression ---> postfix_expression
[Line No. 8] :: cast_expression ---> unary_expression
[Line No. 8] :: multiplicative_expression ---> cast_expression
[Line No. 8] :: additive_expression ---> multiplicative_expression
[Line No. 8] :: shift_expression ---> additive_expression
[Line No. 8] :: relational_expression ---> shift_expression
[Line No. 8] :: equality_expression ---> relational_expression
[Line No. 8] :: AND_expression ---> equality_expression
[Line No. 8] :: exclusive_OR_expression ---> AND_expression
[Line No. 8] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 8] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 8] :: logical_OR_expression ---> logical_AND_expression
[Line No. 8] :: conditional_expression ---> logical_OR_expression
[Line No. 8] :: assignment_expression ---> conditional_expression
[Line No. 8] :: initialiser ---> assignment_expression
[Line No. 8] :: init_declarator ---> declarator = initialiser
[Line No. 8] :: init_declarator_list ---> init_declarator
[Line No. 8] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 8] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 8] :: block_item ---> declaration
[Line No. 8] :: block_item_list ---> block_item

-------------------- Line No. 9 getting parsed  --------------------

[Line No. 9] :: type_qualifier ---> const
[Line No. 9] :: type_specifier ---> int
[Line No. 9] :: declaration_specifiers_opt ---> epsilon 
[Line No. 9] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 9] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 9] :: declaration_specifiers ---> type_qualifier declaration_specifiers_opt
[Line No. 9] :: pointer_opt ---> epsilon
[Line No. 9] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = ef
[Line No. 9] :: declarator ---> pointer_opt direct_declarator
[Line No. 9] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 5220
[Line No. 9] :: postfix_expression ---> primary_expression
[Line No. 9] :: unary_expression ---> postfix_expression
[Line No. 9] :: cast_expression ---> unary_expression
[Line No. 9] :: multiplicative_expression ---> cast_expression
[Line No. 9] :: additive_expression ---> multiplicative_expression
[Line No. 9] :: shift_expression ---> additive_expression
[Line No. 9] :: relational_expression ---> shift_expression
[Line No. 9] :: equality_expression ---> relational_expression
[Line No. 9] :: AND_expression ---> equality_expression
[Line No. 9] :: exclusive_OR_expression ---> AND_expression
[Line No. 9] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 9] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 9] :: logical_OR_expression ---> logical_AND_expression
[Line No. 9] :: conditional_expression ---> logical_OR_expression
[Line No. 9] :: assignment_expression ---> conditional_expression
[Line No. 9] :: initialiser ---> assignment_expression
[Line No. 9] :: init_declarator ---> declarator = initialiser
[Line No. 9] :: init_declarator_list ---> init_declarator
[Line No. 9] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 9] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 9] :: block_item ---> declaration
[Line No. 9] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 10 getting parsed  --------------------

[Line No. 10] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 10] :: postfix_expression ---> primary_expression
[Line No. 10] :: unary_expression ---> postfix_expression
[Line No. 10] :: cast_expression ---> unary_expression
[Line No. 10] :: multiplicative_expression ---> cast_expression
[Line No. 10] :: additive_expression ---> multiplicative_expression
[Line No. 10] :: shift_expression ---> additive_expression
[Line No. 10] :: relational_expression ---> shift_expression
[Line No. 10] :: equality_expression ---> relational_expression
[Line No. 10] :: AND_expression ---> equality_expression
[Line No. 10] :: exclusive_OR_expression ---> AND_expression
[Line No. 10] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 10] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 10] :: logical_OR_expression ---> logical_AND_expression
[Line No. 10] :: conditional_expression ---> logical_OR_expression
[Line No. 10] :: assignment_expression ---> conditional_expression
[Line No. 10] :: expression ---> assignment_expression
[Line No. 10] :: expression_opt ---> expression
[Line No. 10] :: jump_statement ---> return expression_opt ;
[Line No. 10] :: statement ---> jump_statement
[Line No. 10] :: block_item ---> statement
[Line No. 10] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 11 getting parsed  --------------------

[Line No. 11] :: block_item_list_opt ---> block_item_list
[Line No. 11] :: compound_statement ---> { block_item_list_opt }
[Line No. 11] :: function_definition ---> declaration_specifiers declarator declaration_list_opt compound_statement
[Line No. 11] :: external_declaration ---> function_definition
[Line No. 11] :: translation_unit ---> external_declaration

-------------------- Line No. 12 getting parsed  --------------------


-------------------- Line No. 13 getting parsed  --------------------


-------------------- Line No. 14 getting parsed  --------------------

[Line No. 14] :: type_specifier ---> float
[Line No. 14] :: declaration_specifiers_opt ---> epsilon 
[Line No. 14] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 14] :: pointer_opt ---> epsilon
[Line No. 14] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = calculate
[Line No. 14] :: type_specifier ---> float
[Line No. 14] :: declaration_specifiers_opt ---> epsilon 
[Line No. 14] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 14] :: pointer_opt ---> epsilon
[Line No. 14] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 14] :: declarator ---> pointer_opt direct_declarator
[Line No. 14] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 14] :: parameter_list ---> parameter_declaration
[Line No. 14] :: type_specifier ---> float
[Line No. 14] :: declaration_specifiers_opt ---> epsilon 
[Line No. 14] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 14] :: pointer_opt ---> epsilon
[Line No. 14] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = b
[Line No. 14] :: declarator ---> pointer_opt direct_declarator
[Line No. 14] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 14] :: parameter_list ---> parameter_list , parameter_declaration
[Line No. 14] :: parameter_type_list ---> parameter_list
[Line No. 14] :: direct_declarator ---> direct_declarator ( parameter_type_list )

-------------------- Line No. 15 getting parsed  --------------------

[Line No. 15] :: declarator ---> pointer_opt direct_declarator
[Line No. 15] :: declaration_list_opt ---> epsilon

-------------------- Line No. 16 getting parsed  --------------------

[Line No. 16] :: storage_class_specifier ---> register
[Line No. 16] :: type_specifier ---> int
[Line No. 16] :: declaration_specifiers_opt ---> epsilon 
[Line No. 16] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 16] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 16] :: declaration_specifiers ---> storage_class_specifier declaration_specifiers_opt
[Line No. 16] :: pointer_opt ---> epsilon
[Line No. 16] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = b
[Line No. 16] :: declarator ---> pointer_opt direct_declarator
[Line No. 16] :: init_declarator ---> declarator
[Line No. 16] :: init_declarator_list ---> init_declarator
[Line No. 16] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 16] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 16] :: block_item ---> declaration
[Line No. 16] :: block_item_list ---> block_item

-------------------- Line No. 17 getting parsed  --------------------

[Line No. 17] :: storage_class_specifier ---> extern
[Line No. 17] :: type_specifier ---> int
[Line No. 17] :: declaration_specifiers_opt ---> epsilon 
[Line No. 17] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 17] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 17] :: declaration_specifiers ---> storage_class_specifier declaration_specifiers_opt
[Line No. 17] :: pointer_opt ---> epsilon
[Line No. 17] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = c
[Line No. 17] :: declarator ---> pointer_opt direct_declarator
[Line No. 17] :: init_declarator ---> declarator
[Line No. 17] :: init_declarator_list ---> init_declarator
[Line No. 17] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 17] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 17] :: block_item ---> declaration
[Line No. 17] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 18 getting parsed  --------------------

[Line No. 18] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 18] :: postfix_expression ---> primary_expression
[Line No. 18] :: unary_expression ---> postfix_expression
[Line No. 18] :: cast_expression ---> unary_expression
[Line No. 18] :: multiplicative_expression ---> cast_expression
[Line No. 18] :: additive_expression ---> multiplicative_expression
[Line No. 18] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = b
[Line No. 18] :: postfix_expression ---> primary_expression
[Line No. 18] :: unary_expression ---> postfix_expression
[Line No. 18] :: cast_expression ---> unary_expression
[Line No. 18] :: multiplicative_expression ---> cast_expression
[Line No. 18] :: additive_expression ---> additive_expression + multiplicative_expression
[Line No. 18] :: shift_expression ---> additive_expression
[Line No. 18] :: relational_expression ---> shift_expression
[Line No. 18] :: equality_expression ---> relational_expression
[Line No. 18] :: AND_expression ---> equality_expression
[Line No. 18] :: exclusive_OR_expression ---> AND_expression
[Line No. 18] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 18] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 18] :: logical_OR_expression ---> logical_AND_expression
[Line No. 18] :: conditional_expression ---> logical_OR_expression
[Line No. 18] :: assignment_expression ---> conditional_expression
[Line No. 18] :: expression ---> assignment_expression
[Line No. 18] :: expression_opt ---> expression
[Line No. 18] :: jump_statement ---> return expression_opt ;
[Line No. 18] :: statement ---> jump_statement
[Line No. 18] :: block_item ---> statement
[Line No. 18] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 19 getting parsed  --------------------

[Line No. 19] :: block_item_list_opt ---> block_item_list
[Line No. 19] :: compound_statement ---> { block_item_list_opt }
[Line No. 19] :: function_definition ---> declaration_specifiers declarator declaration_list_opt compound_statement
[Line No. 19] :: external_declaration ---> function_definition
[Line No. 19] :: translation_unit ---> translation_unit external_declaration

-------------------- Line No. 20 getting parsed  --------------------


-------------------- Line No. 21 getting parsed  --------------------

[Line No. 21] :: type_specifier ---> void
[Line No. 21] :: declaration_specifiers_opt ---> epsilon 
[Line No. 21] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 21] :: pointer_opt ---> epsilon
[Line No. 21] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = swap
[Line No. 21] :: type_specifier ---> int
[Line No. 21] :: declaration_specifiers_opt ---> epsilon 
[Line No. 21] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 21] :: type_qualifier_list_opt ---> epsilon
[Line No. 21] :: pointer ---> * type_qualifier_list_opt
[Line No. 21] :: pointer_opt ---> pointer
[Line No. 21] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 21] :: declarator ---> pointer_opt direct_declarator
[Line No. 21] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 21] :: parameter_list ---> parameter_declaration
[Line No. 21] :: type_specifier ---> int
[Line No. 21] :: declaration_specifiers_opt ---> epsilon 
[Line No. 21] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 21] :: type_qualifier_list_opt ---> epsilon
[Line No. 21] :: pointer ---> * type_qualifier_list_opt
[Line No. 21] :: pointer_opt ---> pointer
[Line No. 21] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = b
[Line No. 21] :: declarator ---> pointer_opt direct_declarator
[Line No. 21] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 21] :: parameter_list ---> parameter_list , parameter_declaration
[Line No. 21] :: parameter_type_list ---> parameter_list
[Line No. 21] :: direct_declarator ---> direct_declarator ( parameter_type_list )

-------------------- Line No. 22 getting parsed  --------------------

[Line No. 22] :: declarator ---> pointer_opt direct_declarator
[Line No. 22] :: declaration_list_opt ---> epsilon

-------------------- Line No. 23 getting parsed  --------------------

[Line No. 23] :: type_specifier ---> int
[Line No. 23] :: declaration_specifiers_opt ---> epsilon 
[Line No. 23] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 23] :: pointer_opt ---> epsilon
[Line No. 23] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = temp
[Line No. 23] :: declarator ---> pointer_opt direct_declarator
[Line No. 23] :: unary_operator ---> *
[Line No. 23] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 23] :: postfix_expression ---> primary_expression
[Line No. 23] :: unary_expression ---> postfix_expression
[Line No. 23] :: cast_expression ---> unary_expression
[Line No. 23] :: unary_expression ---> unary_operator cast_expression
[Line No. 23] :: cast_expression ---> unary_expression
[Line No. 23] :: multiplicative_expression ---> cast_expression
[Line No. 23] :: additive_expression ---> multiplicative_expression
[Line No. 23] :: shift_expression ---> additive_expression
[Line No. 23] :: relational_expression ---> shift_expression
[Line No. 23] :: equality_expression ---> relational_expression
[Line No. 23] :: AND_expression ---> equality_expression
[Line No. 23] :: exclusive_OR_expression ---> AND_expression
[Line No. 23] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 23] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 23] :: logical_OR_expression ---> logical_AND_expression
[Line No. 23] :: conditional_expression ---> logical_OR_expression
[Line No. 23] :: assignment_expression ---> conditional_expression
[Line No. 23] :: initialiser ---> assignment_expression
[Line No. 23] :: init_declarator ---> declarator = initialiser
[Line No. 23] :: init_declarator_list ---> init_declarator
[Line No. 23] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 23] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 23] :: block_item ---> declaration
[Line No. 23] :: block_item_list ---> block_item

-------------------- Line No. 24 getting parsed  --------------------

[Line No. 24] :: unary_operator ---> *
[Line No. 24] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = a
[Line No. 24] :: postfix_expression ---> primary_expression
[Line No. 24] :: unary_expression ---> postfix_expression
[Line No. 24] :: cast_expression ---> unary_expression
[Line No. 24] :: unary_expression ---> unary_operator cast_expression
[Line No. 24] :: assignment_operator ---> =
[Line No. 24] :: unary_operator ---> *
[Line No. 24] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = b
[Line No. 24] :: postfix_expression ---> primary_expression
[Line No. 24] :: unary_expression ---> postfix_expression
[Line No. 24] :: cast_expression ---> unary_expression
[Line No. 24] :: unary_expression ---> unary_operator cast_expression
[Line No. 24] :: cast_expression ---> unary_expression
[Line No. 24] :: multiplicative_expression ---> cast_expression
[Line No. 24] :: additive_expression ---> multiplicative_expression
[Line No. 24] :: shift_expression ---> additive_expression
[Line No. 24] :: relational_expression ---> shift_expression
[Line No. 24] :: equality_expression ---> relational_expression
[Line No. 24] :: AND_expression ---> equality_expression
[Line No. 24] :: exclusive_OR_expression ---> AND_expression
[Line No. 24] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 24] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 24] :: logical_OR_expression ---> logical_AND_expression
[Line No. 24] :: conditional_expression ---> logical_OR_expression
[Line No. 24] :: assignment_expression ---> conditional_expression
[Line No. 24] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 24] :: expression ---> assignment_expression
[Line No. 24] :: expression_opt ---> expression
[Line No. 24] :: expression_statement ---> expression_opt ;
[Line No. 24] :: statement ---> expression_statement
[Line No. 24] :: block_item ---> statement
[Line No. 24] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 25 getting parsed  --------------------

[Line No. 25] :: unary_operator ---> *
[Line No. 25] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = b
[Line No. 25] :: postfix_expression ---> primary_expression
[Line No. 25] :: unary_expression ---> postfix_expression
[Line No. 25] :: cast_expression ---> unary_expression
[Line No. 25] :: unary_expression ---> unary_operator cast_expression
[Line No. 25] :: assignment_operator ---> =
[Line No. 25] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = temp
[Line No. 25] :: postfix_expression ---> primary_expression
[Line No. 25] :: unary_expression ---> postfix_expression
[Line No. 25] :: cast_expression ---> unary_expression
[Line No. 25] :: multiplicative_expression ---> cast_expression
[Line No. 25] :: additive_expression ---> multiplicative_expression
[Line No. 25] :: shift_expression ---> additive_expression
[Line No. 25] :: relational_expression ---> shift_expression
[Line No. 25] :: equality_expression ---> relational_expression
[Line No. 25] :: AND_expression ---> equality_expression
[Line No. 25] :: exclusive_OR_expression ---> AND_expression
[Line No. 25] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 25] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 25] :: logical_OR_expression ---> logical_AND_expression
[Line No. 25] :: conditional_expression ---> logical_OR_expression
[Line No. 25] :: assignment_expression ---> conditional_expression
[Line No. 25] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 25] :: expression ---> assignment_expression
[Line No. 25] :: expression_opt ---> expression
[Line No. 25] :: expression_statement ---> expression_opt ;
[Line No. 25] :: statement ---> expression_statement
[Line No. 25] :: block_item ---> statement
[Line No. 25] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 26 getting parsed  --------------------

[Line No. 26] :: block_item_list_opt ---> block_item_list
[Line No. 26] :: compound_statement ---> { block_item_list_opt }
[Line No. 26] :: function_definition ---> declaration_specifiers declarator declaration_list_opt compound_statement
[Line No. 26] :: external_declaration ---> function_definition
[Line No. 26] :: translation_unit ---> translation_unit external_declaration

-------------------- Line No. 27 getting parsed  --------------------


-------------------- Line No. 28 getting parsed  --------------------


-------------------- Line No. 29 getting parsed  --------------------


-------------------- Line No. 30 getting parsed  --------------------

[Line No. 30] :: identifier_opt ---> IDENTIFIER
				IDENTIFIER = enum_test

-------------------- Line No. 31 getting parsed  --------------------

[Line No. 31] :: enumerator ---> ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = a
[Line No. 31] :: enumerator_list ---> enumerator

-------------------- Line No. 32 getting parsed  --------------------

[Line No. 32] :: enumerator ---> ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = b
[Line No. 32] :: enumerator_list ---> enumerator_list , enumerator

-------------------- Line No. 33 getting parsed  --------------------


-------------------- Line No. 34 getting parsed  --------------------

[Line No. 34] :: enumerator ---> ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = c
[Line No. 34] :: enumerator_list ---> enumerator_list , enumerator
[Line No. 34] :: enum_specifier ---> enum identifier_opt { enumerator_list }
[Line No. 34] :: type_specifier ---> enum_specifier
[Line No. 34] :: declaration_specifiers_opt ---> epsilon 
[Line No. 34] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 34] :: init_declarator_list_opt ---> epsilon
[Line No. 34] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 34] :: external_declaration ---> declaration
[Line No. 34] :: translation_unit ---> translation_unit external_declaration

-------------------- Line No. 35 getting parsed  --------------------


-------------------- Line No. 36 getting parsed  --------------------

[Line No. 36] :: storage_class_specifier ---> static
[Line No. 36] :: type_specifier ---> int
[Line No. 36] :: declaration_specifiers_opt ---> epsilon 
[Line No. 36] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 36] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 36] :: declaration_specifiers ---> storage_class_specifier declaration_specifiers_opt
[Line No. 36] :: pointer_opt ---> epsilon
[Line No. 36] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = test1
[Line No. 36] :: declarator ---> pointer_opt direct_declarator
[Line No. 36] :: init_declarator ---> declarator
[Line No. 36] :: init_declarator_list ---> init_declarator
[Line No. 36] :: pointer_opt ---> epsilon
[Line No. 36] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = test2
[Line No. 36] :: declarator ---> pointer_opt direct_declarator
[Line No. 36] :: init_declarator ---> declarator
[Line No. 36] :: init_declarator_list ---> init_declarator_list , init_declarator
[Line No. 36] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 36] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 36] :: external_declaration ---> declaration
[Line No. 36] :: translation_unit ---> translation_unit external_declaration

-------------------- Line No. 37 getting parsed  --------------------


-------------------- Line No. 38 getting parsed  --------------------

[Line No. 38] :: type_specifier ---> signed
[Line No. 38] :: declaration_specifiers_opt ---> epsilon 
[Line No. 38] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 38] :: pointer_opt ---> epsilon
[Line No. 38] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = main
[Line No. 38] :: type_specifier ---> int
[Line No. 38] :: declaration_specifiers_opt ---> epsilon 
[Line No. 38] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 38] :: pointer_opt ---> epsilon
[Line No. 38] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = argc
[Line No. 38] :: declarator ---> pointer_opt direct_declarator
[Line No. 38] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 38] :: parameter_list ---> parameter_declaration
[Line No. 38] :: type_specifier ---> char
[Line No. 38] :: type_qualifier ---> const
[Line No. 38] :: declaration_specifiers_opt ---> epsilon 
[Line No. 38] :: declaration_specifiers ---> type_qualifier declaration_specifiers_opt
[Line No. 38] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 38] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 38] :: type_qualifier_list_opt ---> epsilon
[Line No. 38] :: pointer ---> * type_qualifier_list_opt
[Line No. 38] :: pointer_opt ---> pointer
[Line No. 38] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = argv
[Line No. 38] :: type_qualifier_list_opt ---> epsilon
[Line No. 38] :: assignment_expression_opt ---> epsilon
[Line No. 38] :: direct_declarator ---> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line No. 38] :: declarator ---> pointer_opt direct_declarator
[Line No. 38] :: parameter_declaration ---> declaration_specifiers declarator
[Line No. 38] :: parameter_list ---> parameter_list , parameter_declaration
[Line No. 38] :: parameter_type_list ---> parameter_list
[Line No. 38] :: direct_declarator ---> direct_declarator ( parameter_type_list )

-------------------- Line No. 39 getting parsed  --------------------

[Line No. 39] :: declarator ---> pointer_opt direct_declarator
[Line No. 39] :: declaration_list_opt ---> epsilon

-------------------- Line No. 40 getting parsed  --------------------

[Line No. 40] :: type_specifier ---> int
[Line No. 40] :: declaration_specifiers_opt ---> epsilon 
[Line No. 40] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 40] :: pointer_opt ---> epsilon
[Line No. 40] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 40] :: declarator ---> pointer_opt direct_declarator
[Line No. 40] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 4
[Line No. 40] :: postfix_expression ---> primary_expression
[Line No. 40] :: unary_expression ---> postfix_expression
[Line No. 40] :: cast_expression ---> unary_expression
[Line No. 40] :: multiplicative_expression ---> cast_expression
[Line No. 40] :: type_specifier ---> int
[Line No. 40] :: specifier_qualifier_list_opt ---> epsilon
[Line No. 40] :: specifier_qualifier_list ---> type_specifier specifier_qualifier_list_opt
[Line No. 40] :: type_name ---> specifier_qualifier_list
[Line No. 40] :: unary_expression ---> sizeof ( type_name )
[Line No. 40] :: cast_expression ---> unary_expression
[Line No. 40] :: multiplicative_expression ---> multiplicative_expression * cast_expression
[Line No. 40] :: additive_expression ---> multiplicative_expression
[Line No. 40] :: shift_expression ---> additive_expression
[Line No. 40] :: relational_expression ---> shift_expression
[Line No. 40] :: equality_expression ---> relational_expression
[Line No. 40] :: AND_expression ---> equality_expression
[Line No. 40] :: exclusive_OR_expression ---> AND_expression
[Line No. 40] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 40] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 40] :: logical_OR_expression ---> logical_AND_expression
[Line No. 40] :: conditional_expression ---> logical_OR_expression
[Line No. 40] :: assignment_expression ---> conditional_expression
[Line No. 40] :: initialiser ---> assignment_expression
[Line No. 40] :: init_declarator ---> declarator = initialiser
[Line No. 40] :: init_declarator_list ---> init_declarator
[Line No. 40] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 40] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 40] :: block_item ---> declaration
[Line No. 40] :: block_item_list ---> block_item

-------------------- Line No. 41 getting parsed  --------------------

[Line No. 41] :: type_specifier ---> int
[Line No. 41] :: declaration_specifiers_opt ---> epsilon 
[Line No. 41] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 41] :: pointer_opt ---> epsilon
[Line No. 41] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = arr
[Line No. 41] :: type_qualifier_list_opt ---> epsilon
[Line No. 41] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 41] :: postfix_expression ---> primary_expression
[Line No. 41] :: unary_expression ---> postfix_expression
[Line No. 41] :: cast_expression ---> unary_expression
[Line No. 41] :: multiplicative_expression ---> cast_expression
[Line No. 41] :: additive_expression ---> multiplicative_expression
[Line No. 41] :: shift_expression ---> additive_expression
[Line No. 41] :: relational_expression ---> shift_expression
[Line No. 41] :: equality_expression ---> relational_expression
[Line No. 41] :: AND_expression ---> equality_expression
[Line No. 41] :: exclusive_OR_expression ---> AND_expression
[Line No. 41] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 41] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 41] :: logical_OR_expression ---> logical_AND_expression
[Line No. 41] :: conditional_expression ---> logical_OR_expression
[Line No. 41] :: assignment_expression ---> conditional_expression
[Line No. 41] :: assignment_expression_opt ---> assignment_expression
[Line No. 41] :: direct_declarator ---> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line No. 41] :: declarator ---> pointer_opt direct_declarator
[Line No. 41] :: init_declarator ---> declarator
[Line No. 41] :: init_declarator_list ---> init_declarator
[Line No. 41] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 41] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 41] :: block_item ---> declaration
[Line No. 41] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 42 getting parsed  --------------------

[Line No. 42] :: type_specifier ---> int
[Line No. 42] :: declaration_specifiers_opt ---> epsilon 
[Line No. 42] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 42] :: pointer_opt ---> epsilon
[Line No. 42] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 42] :: declarator ---> pointer_opt direct_declarator
[Line No. 42] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = arr
[Line No. 42] :: postfix_expression ---> primary_expression
[Line No. 42] :: unary_expression ---> postfix_expression
[Line No. 42] :: cast_expression ---> unary_expression
[Line No. 42] :: multiplicative_expression ---> cast_expression
[Line No. 42] :: additive_expression ---> multiplicative_expression
[Line No. 42] :: shift_expression ---> additive_expression
[Line No. 42] :: relational_expression ---> shift_expression
[Line No. 42] :: equality_expression ---> relational_expression
[Line No. 42] :: AND_expression ---> equality_expression
[Line No. 42] :: exclusive_OR_expression ---> AND_expression
[Line No. 42] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 42] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 42] :: logical_OR_expression ---> logical_AND_expression
[Line No. 42] :: conditional_expression ---> logical_OR_expression
[Line No. 42] :: assignment_expression ---> conditional_expression
[Line No. 42] :: expression ---> assignment_expression
[Line No. 42] :: primary_expression ---> ( expression )
[Line No. 42] :: postfix_expression ---> primary_expression
[Line No. 42] :: unary_expression ---> postfix_expression
[Line No. 42] :: unary_expression ---> sizeof unary_expression
[Line No. 42] :: cast_expression ---> unary_expression
[Line No. 42] :: multiplicative_expression ---> cast_expression
[Line No. 42] :: type_specifier ---> int
[Line No. 42] :: specifier_qualifier_list_opt ---> epsilon
[Line No. 42] :: specifier_qualifier_list ---> type_specifier specifier_qualifier_list_opt
[Line No. 42] :: type_name ---> specifier_qualifier_list
[Line No. 42] :: unary_expression ---> sizeof ( type_name )
[Line No. 42] :: cast_expression ---> unary_expression
[Line No. 42] :: multiplicative_expression ---> multiplicative_expression / cast_expression
[Line No. 42] :: additive_expression ---> multiplicative_expression
[Line No. 42] :: shift_expression ---> additive_expression
[Line No. 42] :: relational_expression ---> shift_expression
[Line No. 42] :: equality_expression ---> relational_expression
[Line No. 42] :: AND_expression ---> equality_expression
[Line No. 42] :: exclusive_OR_expression ---> AND_expression
[Line No. 42] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 42] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 42] :: logical_OR_expression ---> logical_AND_expression
[Line No. 42] :: conditional_expression ---> logical_OR_expression
[Line No. 42] :: assignment_expression ---> conditional_expression
[Line No. 42] :: initialiser ---> assignment_expression
[Line No. 42] :: init_declarator ---> declarator = initialiser
[Line No. 42] :: init_declarator_list ---> init_declarator
[Line No. 42] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 42] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 42] :: block_item ---> declaration
[Line No. 42] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 43 getting parsed  --------------------

[Line No. 43] :: type_specifier ---> int
[Line No. 43] :: declaration_specifiers_opt ---> epsilon 
[Line No. 43] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 43] :: pointer_opt ---> epsilon
[Line No. 43] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 43] :: declarator ---> pointer_opt direct_declarator
[Line No. 43] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 43] :: postfix_expression ---> primary_expression
[Line No. 43] :: unary_expression ---> postfix_expression
[Line No. 43] :: cast_expression ---> unary_expression
[Line No. 43] :: multiplicative_expression ---> cast_expression
[Line No. 43] :: additive_expression ---> multiplicative_expression
[Line No. 43] :: shift_expression ---> additive_expression
[Line No. 43] :: relational_expression ---> shift_expression
[Line No. 43] :: equality_expression ---> relational_expression
[Line No. 43] :: AND_expression ---> equality_expression
[Line No. 43] :: exclusive_OR_expression ---> AND_expression
[Line No. 43] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 43] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 43] :: logical_OR_expression ---> logical_AND_expression
[Line No. 43] :: conditional_expression ---> logical_OR_expression
[Line No. 43] :: assignment_expression ---> conditional_expression
[Line No. 43] :: initialiser ---> assignment_expression
[Line No. 43] :: init_declarator ---> declarator = initialiser
[Line No. 43] :: init_declarator_list ---> init_declarator
[Line No. 43] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 43] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 43] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 43] :: postfix_expression ---> primary_expression
[Line No. 43] :: unary_expression ---> postfix_expression
[Line No. 43] :: cast_expression ---> unary_expression
[Line No. 43] :: multiplicative_expression ---> cast_expression
[Line No. 43] :: additive_expression ---> multiplicative_expression
[Line No. 43] :: shift_expression ---> additive_expression
[Line No. 43] :: relational_expression ---> shift_expression
[Line No. 43] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 43] :: postfix_expression ---> primary_expression
[Line No. 43] :: unary_expression ---> postfix_expression
[Line No. 43] :: cast_expression ---> unary_expression
[Line No. 43] :: multiplicative_expression ---> cast_expression
[Line No. 43] :: additive_expression ---> multiplicative_expression
[Line No. 43] :: shift_expression ---> additive_expression
[Line No. 43] :: relational_expression ---> relational_expression < shift_expression
[Line No. 43] :: equality_expression ---> relational_expression
[Line No. 43] :: AND_expression ---> equality_expression
[Line No. 43] :: exclusive_OR_expression ---> AND_expression
[Line No. 43] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 43] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 43] :: logical_OR_expression ---> logical_AND_expression
[Line No. 43] :: conditional_expression ---> logical_OR_expression
[Line No. 43] :: assignment_expression ---> conditional_expression
[Line No. 43] :: expression ---> assignment_expression
[Line No. 43] :: expression_opt ---> expression
[Line No. 43] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 43] :: postfix_expression ---> primary_expression
[Line No. 43] :: postfix_expression ---> postfix_expression ++
[Line No. 43] :: unary_expression ---> postfix_expression
[Line No. 43] :: cast_expression ---> unary_expression
[Line No. 43] :: multiplicative_expression ---> cast_expression
[Line No. 43] :: additive_expression ---> multiplicative_expression
[Line No. 43] :: shift_expression ---> additive_expression
[Line No. 43] :: relational_expression ---> shift_expression
[Line No. 43] :: equality_expression ---> relational_expression
[Line No. 43] :: AND_expression ---> equality_expression
[Line No. 43] :: exclusive_OR_expression ---> AND_expression
[Line No. 43] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 43] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 43] :: logical_OR_expression ---> logical_AND_expression
[Line No. 43] :: conditional_expression ---> logical_OR_expression
[Line No. 43] :: assignment_expression ---> conditional_expression
[Line No. 43] :: expression ---> assignment_expression
[Line No. 43] :: expression_opt ---> expression

-------------------- Line No. 44 getting parsed  --------------------


-------------------- Line No. 45 getting parsed  --------------------

[Line No. 45] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = arr
[Line No. 45] :: postfix_expression ---> primary_expression
[Line No. 45] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 45] :: postfix_expression ---> primary_expression
[Line No. 45] :: unary_expression ---> postfix_expression
[Line No. 45] :: cast_expression ---> unary_expression
[Line No. 45] :: multiplicative_expression ---> cast_expression
[Line No. 45] :: additive_expression ---> multiplicative_expression
[Line No. 45] :: shift_expression ---> additive_expression
[Line No. 45] :: relational_expression ---> shift_expression
[Line No. 45] :: equality_expression ---> relational_expression
[Line No. 45] :: AND_expression ---> equality_expression
[Line No. 45] :: exclusive_OR_expression ---> AND_expression
[Line No. 45] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 45] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 45] :: logical_OR_expression ---> logical_AND_expression
[Line No. 45] :: conditional_expression ---> logical_OR_expression
[Line No. 45] :: assignment_expression ---> conditional_expression
[Line No. 45] :: expression ---> assignment_expression
[Line No. 45] :: postfix_expression ---> postfix_expression [ expression ]
[Line No. 45] :: unary_expression ---> postfix_expression
[Line No. 45] :: assignment_operator ---> =
[Line No. 45] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 45] :: postfix_expression ---> primary_expression
[Line No. 45] :: unary_expression ---> postfix_expression
[Line No. 45] :: cast_expression ---> unary_expression
[Line No. 45] :: multiplicative_expression ---> cast_expression
[Line No. 45] :: additive_expression ---> multiplicative_expression
[Line No. 45] :: shift_expression ---> additive_expression
[Line No. 45] :: relational_expression ---> shift_expression
[Line No. 45] :: equality_expression ---> relational_expression
[Line No. 45] :: AND_expression ---> equality_expression
[Line No. 45] :: exclusive_OR_expression ---> AND_expression
[Line No. 45] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 45] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 45] :: logical_OR_expression ---> logical_AND_expression
[Line No. 45] :: conditional_expression ---> logical_OR_expression
[Line No. 45] :: assignment_expression ---> conditional_expression
[Line No. 45] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 45] :: expression ---> assignment_expression
[Line No. 45] :: expression_opt ---> expression
[Line No. 45] :: expression_statement ---> expression_opt ;
[Line No. 45] :: statement ---> expression_statement
[Line No. 45] :: block_item ---> statement
[Line No. 45] :: block_item_list ---> block_item

-------------------- Line No. 46 getting parsed  --------------------

[Line No. 46] :: block_item_list_opt ---> block_item_list
[Line No. 46] :: compound_statement ---> { block_item_list_opt }
[Line No. 46] :: statement ---> compound_statement
[Line No. 46] :: iteration_statement ---> for ( declaration expression_opt ; expression_opt ) statement
[Line No. 46] :: statement ---> iteration_statement
[Line No. 46] :: block_item ---> statement
[Line No. 46] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 47 getting parsed  --------------------

[Line No. 47] :: type_specifier ---> int
[Line No. 47] :: declaration_specifiers_opt ---> epsilon 
[Line No. 47] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 47] :: pointer_opt ---> epsilon
[Line No. 47] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 47] :: declarator ---> pointer_opt direct_declarator
[Line No. 47] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 47] :: postfix_expression ---> primary_expression
[Line No. 47] :: unary_expression ---> postfix_expression
[Line No. 47] :: cast_expression ---> unary_expression
[Line No. 47] :: multiplicative_expression ---> cast_expression
[Line No. 47] :: additive_expression ---> multiplicative_expression
[Line No. 47] :: shift_expression ---> additive_expression
[Line No. 47] :: relational_expression ---> shift_expression
[Line No. 47] :: equality_expression ---> relational_expression
[Line No. 47] :: AND_expression ---> equality_expression
[Line No. 47] :: exclusive_OR_expression ---> AND_expression
[Line No. 47] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 47] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 47] :: logical_OR_expression ---> logical_AND_expression
[Line No. 47] :: conditional_expression ---> logical_OR_expression
[Line No. 47] :: assignment_expression ---> conditional_expression
[Line No. 47] :: initialiser ---> assignment_expression
[Line No. 47] :: init_declarator ---> declarator = initialiser
[Line No. 47] :: init_declarator_list ---> init_declarator
[Line No. 47] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 47] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 47] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 47] :: postfix_expression ---> primary_expression
[Line No. 47] :: unary_expression ---> postfix_expression
[Line No. 47] :: cast_expression ---> unary_expression
[Line No. 47] :: multiplicative_expression ---> cast_expression
[Line No. 47] :: additive_expression ---> multiplicative_expression
[Line No. 47] :: shift_expression ---> additive_expression
[Line No. 47] :: relational_expression ---> shift_expression
[Line No. 47] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 47] :: postfix_expression ---> primary_expression
[Line No. 47] :: unary_expression ---> postfix_expression
[Line No. 47] :: cast_expression ---> unary_expression
[Line No. 47] :: multiplicative_expression ---> cast_expression
[Line No. 47] :: additive_expression ---> multiplicative_expression
[Line No. 47] :: shift_expression ---> additive_expression
[Line No. 47] :: relational_expression ---> relational_expression < shift_expression
[Line No. 47] :: equality_expression ---> relational_expression
[Line No. 47] :: AND_expression ---> equality_expression
[Line No. 47] :: exclusive_OR_expression ---> AND_expression
[Line No. 47] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 47] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 47] :: logical_OR_expression ---> logical_AND_expression
[Line No. 47] :: conditional_expression ---> logical_OR_expression
[Line No. 47] :: assignment_expression ---> conditional_expression
[Line No. 47] :: expression ---> assignment_expression
[Line No. 47] :: expression_opt ---> expression
[Line No. 47] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 47] :: postfix_expression ---> primary_expression
[Line No. 47] :: postfix_expression ---> postfix_expression ++
[Line No. 47] :: unary_expression ---> postfix_expression
[Line No. 47] :: cast_expression ---> unary_expression
[Line No. 47] :: multiplicative_expression ---> cast_expression
[Line No. 47] :: additive_expression ---> multiplicative_expression
[Line No. 47] :: shift_expression ---> additive_expression
[Line No. 47] :: relational_expression ---> shift_expression
[Line No. 47] :: equality_expression ---> relational_expression
[Line No. 47] :: AND_expression ---> equality_expression
[Line No. 47] :: exclusive_OR_expression ---> AND_expression
[Line No. 47] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 47] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 47] :: logical_OR_expression ---> logical_AND_expression
[Line No. 47] :: conditional_expression ---> logical_OR_expression
[Line No. 47] :: assignment_expression ---> conditional_expression
[Line No. 47] :: expression ---> assignment_expression
[Line No. 47] :: expression_opt ---> expression

-------------------- Line No. 48 getting parsed  --------------------


-------------------- Line No. 49 getting parsed  --------------------

[Line No. 49] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 49] :: postfix_expression ---> primary_expression
[Line No. 49] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "%d "
[Line No. 49] :: postfix_expression ---> primary_expression
[Line No. 49] :: unary_expression ---> postfix_expression
[Line No. 49] :: cast_expression ---> unary_expression
[Line No. 49] :: multiplicative_expression ---> cast_expression
[Line No. 49] :: additive_expression ---> multiplicative_expression
[Line No. 49] :: shift_expression ---> additive_expression
[Line No. 49] :: relational_expression ---> shift_expression
[Line No. 49] :: equality_expression ---> relational_expression
[Line No. 49] :: AND_expression ---> equality_expression
[Line No. 49] :: exclusive_OR_expression ---> AND_expression
[Line No. 49] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 49] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 49] :: logical_OR_expression ---> logical_AND_expression
[Line No. 49] :: conditional_expression ---> logical_OR_expression
[Line No. 49] :: assignment_expression ---> conditional_expression
[Line No. 49] :: argument_expression_list ---> assignment_expression
[Line No. 49] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = arr
[Line No. 49] :: postfix_expression ---> primary_expression
[Line No. 49] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 49] :: postfix_expression ---> primary_expression
[Line No. 49] :: unary_expression ---> postfix_expression
[Line No. 49] :: cast_expression ---> unary_expression
[Line No. 49] :: multiplicative_expression ---> cast_expression
[Line No. 49] :: additive_expression ---> multiplicative_expression
[Line No. 49] :: shift_expression ---> additive_expression
[Line No. 49] :: relational_expression ---> shift_expression
[Line No. 49] :: equality_expression ---> relational_expression
[Line No. 49] :: AND_expression ---> equality_expression
[Line No. 49] :: exclusive_OR_expression ---> AND_expression
[Line No. 49] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 49] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 49] :: logical_OR_expression ---> logical_AND_expression
[Line No. 49] :: conditional_expression ---> logical_OR_expression
[Line No. 49] :: assignment_expression ---> conditional_expression
[Line No. 49] :: expression ---> assignment_expression
[Line No. 49] :: postfix_expression ---> postfix_expression [ expression ]
[Line No. 49] :: unary_expression ---> postfix_expression
[Line No. 49] :: cast_expression ---> unary_expression
[Line No. 49] :: multiplicative_expression ---> cast_expression
[Line No. 49] :: additive_expression ---> multiplicative_expression
[Line No. 49] :: shift_expression ---> additive_expression
[Line No. 49] :: relational_expression ---> shift_expression
[Line No. 49] :: equality_expression ---> relational_expression
[Line No. 49] :: AND_expression ---> equality_expression
[Line No. 49] :: exclusive_OR_expression ---> AND_expression
[Line No. 49] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 49] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 49] :: logical_OR_expression ---> logical_AND_expression
[Line No. 49] :: conditional_expression ---> logical_OR_expression
[Line No. 49] :: assignment_expression ---> conditional_expression
[Line No. 49] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 49] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 49] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 49] :: unary_expression ---> postfix_expression
[Line No. 49] :: cast_expression ---> unary_expression
[Line No. 49] :: multiplicative_expression ---> cast_expression
[Line No. 49] :: additive_expression ---> multiplicative_expression
[Line No. 49] :: shift_expression ---> additive_expression
[Line No. 49] :: relational_expression ---> shift_expression
[Line No. 49] :: equality_expression ---> relational_expression
[Line No. 49] :: AND_expression ---> equality_expression
[Line No. 49] :: exclusive_OR_expression ---> AND_expression
[Line No. 49] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 49] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 49] :: logical_OR_expression ---> logical_AND_expression
[Line No. 49] :: conditional_expression ---> logical_OR_expression
[Line No. 49] :: assignment_expression ---> conditional_expression
[Line No. 49] :: expression ---> assignment_expression
[Line No. 49] :: expression_opt ---> expression
[Line No. 49] :: expression_statement ---> expression_opt ;
[Line No. 49] :: statement ---> expression_statement
[Line No. 49] :: block_item ---> statement
[Line No. 49] :: block_item_list ---> block_item

-------------------- Line No. 50 getting parsed  --------------------

[Line No. 50] :: block_item_list_opt ---> block_item_list
[Line No. 50] :: compound_statement ---> { block_item_list_opt }
[Line No. 50] :: statement ---> compound_statement
[Line No. 50] :: iteration_statement ---> for ( declaration expression_opt ; expression_opt ) statement
[Line No. 50] :: statement ---> iteration_statement
[Line No. 50] :: block_item ---> statement
[Line No. 50] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 51 getting parsed  --------------------

[Line No. 51] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 51] :: postfix_expression ---> primary_expression
[Line No. 51] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "\n"
[Line No. 51] :: postfix_expression ---> primary_expression
[Line No. 51] :: unary_expression ---> postfix_expression
[Line No. 51] :: cast_expression ---> unary_expression
[Line No. 51] :: multiplicative_expression ---> cast_expression
[Line No. 51] :: additive_expression ---> multiplicative_expression
[Line No. 51] :: shift_expression ---> additive_expression
[Line No. 51] :: relational_expression ---> shift_expression
[Line No. 51] :: equality_expression ---> relational_expression
[Line No. 51] :: AND_expression ---> equality_expression
[Line No. 51] :: exclusive_OR_expression ---> AND_expression
[Line No. 51] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 51] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 51] :: logical_OR_expression ---> logical_AND_expression
[Line No. 51] :: conditional_expression ---> logical_OR_expression
[Line No. 51] :: assignment_expression ---> conditional_expression
[Line No. 51] :: argument_expression_list ---> assignment_expression
[Line No. 51] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 51] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 51] :: unary_expression ---> postfix_expression
[Line No. 51] :: cast_expression ---> unary_expression
[Line No. 51] :: multiplicative_expression ---> cast_expression
[Line No. 51] :: additive_expression ---> multiplicative_expression
[Line No. 51] :: shift_expression ---> additive_expression
[Line No. 51] :: relational_expression ---> shift_expression
[Line No. 51] :: equality_expression ---> relational_expression
[Line No. 51] :: AND_expression ---> equality_expression
[Line No. 51] :: exclusive_OR_expression ---> AND_expression
[Line No. 51] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 51] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 51] :: logical_OR_expression ---> logical_AND_expression
[Line No. 51] :: conditional_expression ---> logical_OR_expression
[Line No. 51] :: assignment_expression ---> conditional_expression
[Line No. 51] :: expression ---> assignment_expression
[Line No. 51] :: expression_opt ---> expression
[Line No. 51] :: expression_statement ---> expression_opt ;
[Line No. 51] :: statement ---> expression_statement
[Line No. 51] :: block_item ---> statement
[Line No. 51] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 52 getting parsed  --------------------

[Line No. 52] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = argc
[Line No. 52] :: postfix_expression ---> primary_expression
[Line No. 52] :: unary_expression ---> postfix_expression
[Line No. 52] :: cast_expression ---> unary_expression
[Line No. 52] :: multiplicative_expression ---> cast_expression
[Line No. 52] :: additive_expression ---> multiplicative_expression
[Line No. 52] :: shift_expression ---> additive_expression
[Line No. 52] :: relational_expression ---> shift_expression
[Line No. 52] :: equality_expression ---> relational_expression
[Line No. 52] :: AND_expression ---> equality_expression
[Line No. 52] :: exclusive_OR_expression ---> AND_expression
[Line No. 52] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 52] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 52] :: logical_OR_expression ---> logical_AND_expression
[Line No. 52] :: conditional_expression ---> logical_OR_expression
[Line No. 52] :: assignment_expression ---> conditional_expression
[Line No. 52] :: expression ---> assignment_expression

-------------------- Line No. 53 getting parsed  --------------------


-------------------- Line No. 54 getting parsed  --------------------

[Line No. 54] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 54] :: postfix_expression ---> primary_expression
[Line No. 54] :: unary_expression ---> postfix_expression
[Line No. 54] :: cast_expression ---> unary_expression
[Line No. 54] :: multiplicative_expression ---> cast_expression
[Line No. 54] :: additive_expression ---> multiplicative_expression
[Line No. 54] :: shift_expression ---> additive_expression
[Line No. 54] :: relational_expression ---> shift_expression
[Line No. 54] :: equality_expression ---> relational_expression
[Line No. 54] :: AND_expression ---> equality_expression
[Line No. 54] :: exclusive_OR_expression ---> AND_expression
[Line No. 54] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 54] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 54] :: logical_OR_expression ---> logical_AND_expression
[Line No. 54] :: conditional_expression ---> logical_OR_expression
[Line No. 54] :: constant_expression ---> conditional_expression

-------------------- Line No. 55 getting parsed  --------------------

[Line No. 55] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 55] :: postfix_expression ---> primary_expression
[Line No. 55] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "No arguments\n"
[Line No. 55] :: postfix_expression ---> primary_expression
[Line No. 55] :: unary_expression ---> postfix_expression
[Line No. 55] :: cast_expression ---> unary_expression
[Line No. 55] :: multiplicative_expression ---> cast_expression
[Line No. 55] :: additive_expression ---> multiplicative_expression
[Line No. 55] :: shift_expression ---> additive_expression
[Line No. 55] :: relational_expression ---> shift_expression
[Line No. 55] :: equality_expression ---> relational_expression
[Line No. 55] :: AND_expression ---> equality_expression
[Line No. 55] :: exclusive_OR_expression ---> AND_expression
[Line No. 55] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 55] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 55] :: logical_OR_expression ---> logical_AND_expression
[Line No. 55] :: conditional_expression ---> logical_OR_expression
[Line No. 55] :: assignment_expression ---> conditional_expression
[Line No. 55] :: argument_expression_list ---> assignment_expression
[Line No. 55] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 55] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 55] :: unary_expression ---> postfix_expression
[Line No. 55] :: cast_expression ---> unary_expression
[Line No. 55] :: multiplicative_expression ---> cast_expression
[Line No. 55] :: additive_expression ---> multiplicative_expression
[Line No. 55] :: shift_expression ---> additive_expression
[Line No. 55] :: relational_expression ---> shift_expression
[Line No. 55] :: equality_expression ---> relational_expression
[Line No. 55] :: AND_expression ---> equality_expression
[Line No. 55] :: exclusive_OR_expression ---> AND_expression
[Line No. 55] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 55] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 55] :: logical_OR_expression ---> logical_AND_expression
[Line No. 55] :: conditional_expression ---> logical_OR_expression
[Line No. 55] :: assignment_expression ---> conditional_expression
[Line No. 55] :: expression ---> assignment_expression
[Line No. 55] :: expression_opt ---> expression
[Line No. 55] :: expression_statement ---> expression_opt ;
[Line No. 55] :: statement ---> expression_statement
[Line No. 55] :: labeled_statement ---> case constant_expression : statement
[Line No. 55] :: statement ---> labeled_statement
[Line No. 55] :: block_item ---> statement
[Line No. 55] :: block_item_list ---> block_item

-------------------- Line No. 56 getting parsed  --------------------

[Line No. 56] :: jump_statement ---> break ;
[Line No. 56] :: statement ---> jump_statement
[Line No. 56] :: block_item ---> statement
[Line No. 56] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 57 getting parsed  --------------------

[Line No. 57] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 57] :: postfix_expression ---> primary_expression
[Line No. 57] :: unary_expression ---> postfix_expression
[Line No. 57] :: cast_expression ---> unary_expression
[Line No. 57] :: multiplicative_expression ---> cast_expression
[Line No. 57] :: additive_expression ---> multiplicative_expression
[Line No. 57] :: shift_expression ---> additive_expression
[Line No. 57] :: relational_expression ---> shift_expression
[Line No. 57] :: equality_expression ---> relational_expression
[Line No. 57] :: AND_expression ---> equality_expression
[Line No. 57] :: exclusive_OR_expression ---> AND_expression
[Line No. 57] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 57] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 57] :: logical_OR_expression ---> logical_AND_expression
[Line No. 57] :: conditional_expression ---> logical_OR_expression
[Line No. 57] :: constant_expression ---> conditional_expression

-------------------- Line No. 58 getting parsed  --------------------

[Line No. 58] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 58] :: postfix_expression ---> primary_expression
[Line No. 58] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "One argument\n"
[Line No. 58] :: postfix_expression ---> primary_expression
[Line No. 58] :: unary_expression ---> postfix_expression
[Line No. 58] :: cast_expression ---> unary_expression
[Line No. 58] :: multiplicative_expression ---> cast_expression
[Line No. 58] :: additive_expression ---> multiplicative_expression
[Line No. 58] :: shift_expression ---> additive_expression
[Line No. 58] :: relational_expression ---> shift_expression
[Line No. 58] :: equality_expression ---> relational_expression
[Line No. 58] :: AND_expression ---> equality_expression
[Line No. 58] :: exclusive_OR_expression ---> AND_expression
[Line No. 58] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 58] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 58] :: logical_OR_expression ---> logical_AND_expression
[Line No. 58] :: conditional_expression ---> logical_OR_expression
[Line No. 58] :: assignment_expression ---> conditional_expression
[Line No. 58] :: argument_expression_list ---> assignment_expression
[Line No. 58] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 58] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 58] :: unary_expression ---> postfix_expression
[Line No. 58] :: cast_expression ---> unary_expression
[Line No. 58] :: multiplicative_expression ---> cast_expression
[Line No. 58] :: additive_expression ---> multiplicative_expression
[Line No. 58] :: shift_expression ---> additive_expression
[Line No. 58] :: relational_expression ---> shift_expression
[Line No. 58] :: equality_expression ---> relational_expression
[Line No. 58] :: AND_expression ---> equality_expression
[Line No. 58] :: exclusive_OR_expression ---> AND_expression
[Line No. 58] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 58] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 58] :: logical_OR_expression ---> logical_AND_expression
[Line No. 58] :: conditional_expression ---> logical_OR_expression
[Line No. 58] :: assignment_expression ---> conditional_expression
[Line No. 58] :: expression ---> assignment_expression
[Line No. 58] :: expression_opt ---> expression
[Line No. 58] :: expression_statement ---> expression_opt ;
[Line No. 58] :: statement ---> expression_statement
[Line No. 58] :: labeled_statement ---> case constant_expression : statement
[Line No. 58] :: statement ---> labeled_statement
[Line No. 58] :: block_item ---> statement
[Line No. 58] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 59 getting parsed  --------------------

[Line No. 59] :: jump_statement ---> break ;
[Line No. 59] :: statement ---> jump_statement
[Line No. 59] :: block_item ---> statement
[Line No. 59] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 60 getting parsed  --------------------

[Line No. 60] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 3
[Line No. 60] :: postfix_expression ---> primary_expression
[Line No. 60] :: unary_expression ---> postfix_expression
[Line No. 60] :: cast_expression ---> unary_expression
[Line No. 60] :: multiplicative_expression ---> cast_expression
[Line No. 60] :: additive_expression ---> multiplicative_expression
[Line No. 60] :: shift_expression ---> additive_expression
[Line No. 60] :: relational_expression ---> shift_expression
[Line No. 60] :: equality_expression ---> relational_expression
[Line No. 60] :: AND_expression ---> equality_expression
[Line No. 60] :: exclusive_OR_expression ---> AND_expression
[Line No. 60] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 60] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 60] :: logical_OR_expression ---> logical_AND_expression
[Line No. 60] :: conditional_expression ---> logical_OR_expression
[Line No. 60] :: constant_expression ---> conditional_expression

-------------------- Line No. 61 getting parsed  --------------------

[Line No. 61] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 61] :: postfix_expression ---> primary_expression
[Line No. 61] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "Two arguments\n"
[Line No. 61] :: postfix_expression ---> primary_expression
[Line No. 61] :: unary_expression ---> postfix_expression
[Line No. 61] :: cast_expression ---> unary_expression
[Line No. 61] :: multiplicative_expression ---> cast_expression
[Line No. 61] :: additive_expression ---> multiplicative_expression
[Line No. 61] :: shift_expression ---> additive_expression
[Line No. 61] :: relational_expression ---> shift_expression
[Line No. 61] :: equality_expression ---> relational_expression
[Line No. 61] :: AND_expression ---> equality_expression
[Line No. 61] :: exclusive_OR_expression ---> AND_expression
[Line No. 61] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 61] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 61] :: logical_OR_expression ---> logical_AND_expression
[Line No. 61] :: conditional_expression ---> logical_OR_expression
[Line No. 61] :: assignment_expression ---> conditional_expression
[Line No. 61] :: argument_expression_list ---> assignment_expression
[Line No. 61] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 61] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 61] :: unary_expression ---> postfix_expression
[Line No. 61] :: cast_expression ---> unary_expression
[Line No. 61] :: multiplicative_expression ---> cast_expression
[Line No. 61] :: additive_expression ---> multiplicative_expression
[Line No. 61] :: shift_expression ---> additive_expression
[Line No. 61] :: relational_expression ---> shift_expression
[Line No. 61] :: equality_expression ---> relational_expression
[Line No. 61] :: AND_expression ---> equality_expression
[Line No. 61] :: exclusive_OR_expression ---> AND_expression
[Line No. 61] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 61] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 61] :: logical_OR_expression ---> logical_AND_expression
[Line No. 61] :: conditional_expression ---> logical_OR_expression
[Line No. 61] :: assignment_expression ---> conditional_expression
[Line No. 61] :: expression ---> assignment_expression
[Line No. 61] :: expression_opt ---> expression
[Line No. 61] :: expression_statement ---> expression_opt ;
[Line No. 61] :: statement ---> expression_statement
[Line No. 61] :: labeled_statement ---> case constant_expression : statement
[Line No. 61] :: statement ---> labeled_statement
[Line No. 61] :: block_item ---> statement
[Line No. 61] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 62 getting parsed  --------------------

[Line No. 62] :: jump_statement ---> break ;
[Line No. 62] :: statement ---> jump_statement
[Line No. 62] :: block_item ---> statement
[Line No. 62] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 63 getting parsed  --------------------


-------------------- Line No. 64 getting parsed  --------------------

[Line No. 64] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 64] :: postfix_expression ---> primary_expression
[Line No. 64] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "More than two arguments\n"
[Line No. 64] :: postfix_expression ---> primary_expression
[Line No. 64] :: unary_expression ---> postfix_expression
[Line No. 64] :: cast_expression ---> unary_expression
[Line No. 64] :: multiplicative_expression ---> cast_expression
[Line No. 64] :: additive_expression ---> multiplicative_expression
[Line No. 64] :: shift_expression ---> additive_expression
[Line No. 64] :: relational_expression ---> shift_expression
[Line No. 64] :: equality_expression ---> relational_expression
[Line No. 64] :: AND_expression ---> equality_expression
[Line No. 64] :: exclusive_OR_expression ---> AND_expression
[Line No. 64] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 64] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 64] :: logical_OR_expression ---> logical_AND_expression
[Line No. 64] :: conditional_expression ---> logical_OR_expression
[Line No. 64] :: assignment_expression ---> conditional_expression
[Line No. 64] :: argument_expression_list ---> assignment_expression
[Line No. 64] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 64] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 64] :: unary_expression ---> postfix_expression
[Line No. 64] :: cast_expression ---> unary_expression
[Line No. 64] :: multiplicative_expression ---> cast_expression
[Line No. 64] :: additive_expression ---> multiplicative_expression
[Line No. 64] :: shift_expression ---> additive_expression
[Line No. 64] :: relational_expression ---> shift_expression
[Line No. 64] :: equality_expression ---> relational_expression
[Line No. 64] :: AND_expression ---> equality_expression
[Line No. 64] :: exclusive_OR_expression ---> AND_expression
[Line No. 64] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 64] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 64] :: logical_OR_expression ---> logical_AND_expression
[Line No. 64] :: conditional_expression ---> logical_OR_expression
[Line No. 64] :: assignment_expression ---> conditional_expression
[Line No. 64] :: expression ---> assignment_expression
[Line No. 64] :: expression_opt ---> expression
[Line No. 64] :: expression_statement ---> expression_opt ;
[Line No. 64] :: statement ---> expression_statement
[Line No. 64] :: labeled_statement ---> default : statement
[Line No. 64] :: statement ---> labeled_statement
[Line No. 64] :: block_item ---> statement
[Line No. 64] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 65 getting parsed  --------------------

[Line No. 65] :: jump_statement ---> break ;
[Line No. 65] :: statement ---> jump_statement
[Line No. 65] :: block_item ---> statement
[Line No. 65] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 66 getting parsed  --------------------

[Line No. 66] :: block_item_list_opt ---> block_item_list
[Line No. 66] :: compound_statement ---> { block_item_list_opt }
[Line No. 66] :: statement ---> compound_statement
[Line No. 66] :: selection_statement ---> switch ( expression ) statement
[Line No. 66] :: statement ---> selection_statement
[Line No. 66] :: block_item ---> statement
[Line No. 66] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 67 getting parsed  --------------------

[Line No. 67] :: jump_statement ---> goto IDENTIFIER ;
				IDENTIFIER = label
[Line No. 67] :: statement ---> jump_statement
[Line No. 67] :: block_item ---> statement
[Line No. 67] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 68 getting parsed  --------------------

[Line No. 68] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 68] :: postfix_expression ---> primary_expression
[Line No. 68] :: unary_expression ---> postfix_expression
[Line No. 68] :: cast_expression ---> unary_expression
[Line No. 68] :: multiplicative_expression ---> cast_expression
[Line No. 68] :: additive_expression ---> multiplicative_expression
[Line No. 68] :: shift_expression ---> additive_expression
[Line No. 68] :: relational_expression ---> shift_expression
[Line No. 68] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 68] :: postfix_expression ---> primary_expression
[Line No. 68] :: unary_expression ---> postfix_expression
[Line No. 68] :: cast_expression ---> unary_expression
[Line No. 68] :: multiplicative_expression ---> cast_expression
[Line No. 68] :: additive_expression ---> multiplicative_expression
[Line No. 68] :: shift_expression ---> additive_expression
[Line No. 68] :: relational_expression ---> relational_expression > shift_expression
[Line No. 68] :: equality_expression ---> relational_expression
[Line No. 68] :: AND_expression ---> equality_expression
[Line No. 68] :: exclusive_OR_expression ---> AND_expression
[Line No. 68] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 68] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 68] :: logical_OR_expression ---> logical_AND_expression
[Line No. 68] :: conditional_expression ---> logical_OR_expression
[Line No. 68] :: assignment_expression ---> conditional_expression
[Line No. 68] :: expression ---> assignment_expression

-------------------- Line No. 69 getting parsed  --------------------


-------------------- Line No. 70 getting parsed  --------------------

[Line No. 70] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 70] :: postfix_expression ---> primary_expression
[Line No. 70] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "%d "
[Line No. 70] :: postfix_expression ---> primary_expression
[Line No. 70] :: unary_expression ---> postfix_expression
[Line No. 70] :: cast_expression ---> unary_expression
[Line No. 70] :: multiplicative_expression ---> cast_expression
[Line No. 70] :: additive_expression ---> multiplicative_expression
[Line No. 70] :: shift_expression ---> additive_expression
[Line No. 70] :: relational_expression ---> shift_expression
[Line No. 70] :: equality_expression ---> relational_expression
[Line No. 70] :: AND_expression ---> equality_expression
[Line No. 70] :: exclusive_OR_expression ---> AND_expression
[Line No. 70] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 70] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 70] :: logical_OR_expression ---> logical_AND_expression
[Line No. 70] :: conditional_expression ---> logical_OR_expression
[Line No. 70] :: assignment_expression ---> conditional_expression
[Line No. 70] :: argument_expression_list ---> assignment_expression
[Line No. 70] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 70] :: postfix_expression ---> primary_expression
[Line No. 70] :: unary_expression ---> postfix_expression
[Line No. 70] :: cast_expression ---> unary_expression
[Line No. 70] :: multiplicative_expression ---> cast_expression
[Line No. 70] :: additive_expression ---> multiplicative_expression
[Line No. 70] :: shift_expression ---> additive_expression
[Line No. 70] :: relational_expression ---> shift_expression
[Line No. 70] :: equality_expression ---> relational_expression
[Line No. 70] :: AND_expression ---> equality_expression
[Line No. 70] :: exclusive_OR_expression ---> AND_expression
[Line No. 70] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 70] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 70] :: logical_OR_expression ---> logical_AND_expression
[Line No. 70] :: conditional_expression ---> logical_OR_expression
[Line No. 70] :: assignment_expression ---> conditional_expression
[Line No. 70] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 70] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 70] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 70] :: unary_expression ---> postfix_expression
[Line No. 70] :: cast_expression ---> unary_expression
[Line No. 70] :: multiplicative_expression ---> cast_expression
[Line No. 70] :: additive_expression ---> multiplicative_expression
[Line No. 70] :: shift_expression ---> additive_expression
[Line No. 70] :: relational_expression ---> shift_expression
[Line No. 70] :: equality_expression ---> relational_expression
[Line No. 70] :: AND_expression ---> equality_expression
[Line No. 70] :: exclusive_OR_expression ---> AND_expression
[Line No. 70] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 70] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 70] :: logical_OR_expression ---> logical_AND_expression
[Line No. 70] :: conditional_expression ---> logical_OR_expression
[Line No. 70] :: assignment_expression ---> conditional_expression
[Line No. 70] :: expression ---> assignment_expression
[Line No. 70] :: expression_opt ---> expression
[Line No. 70] :: expression_statement ---> expression_opt ;
[Line No. 70] :: statement ---> expression_statement
[Line No. 70] :: block_item ---> statement
[Line No. 70] :: block_item_list ---> block_item

-------------------- Line No. 71 getting parsed  --------------------

[Line No. 71] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 71] :: postfix_expression ---> primary_expression
[Line No. 71] :: postfix_expression ---> postfix_expression --
[Line No. 71] :: unary_expression ---> postfix_expression
[Line No. 71] :: cast_expression ---> unary_expression
[Line No. 71] :: multiplicative_expression ---> cast_expression
[Line No. 71] :: additive_expression ---> multiplicative_expression
[Line No. 71] :: shift_expression ---> additive_expression
[Line No. 71] :: relational_expression ---> shift_expression
[Line No. 71] :: equality_expression ---> relational_expression
[Line No. 71] :: AND_expression ---> equality_expression
[Line No. 71] :: exclusive_OR_expression ---> AND_expression
[Line No. 71] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 71] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 71] :: logical_OR_expression ---> logical_AND_expression
[Line No. 71] :: conditional_expression ---> logical_OR_expression
[Line No. 71] :: assignment_expression ---> conditional_expression
[Line No. 71] :: expression ---> assignment_expression
[Line No. 71] :: expression_opt ---> expression
[Line No. 71] :: expression_statement ---> expression_opt ;
[Line No. 71] :: statement ---> expression_statement
[Line No. 71] :: block_item ---> statement
[Line No. 71] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 72 getting parsed  --------------------

[Line No. 72] :: block_item_list_opt ---> block_item_list
[Line No. 72] :: compound_statement ---> { block_item_list_opt }
[Line No. 72] :: statement ---> compound_statement
[Line No. 72] :: iteration_statement ---> while ( expression ) statement
[Line No. 72] :: statement ---> iteration_statement
[Line No. 72] :: block_item ---> statement
[Line No. 72] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 73 getting parsed  --------------------

[Line No. 73] :: type_specifier ---> short
[Line No. 73] :: declaration_specifiers_opt ---> epsilon 
[Line No. 73] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 73] :: pointer_opt ---> epsilon
[Line No. 73] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n3
[Line No. 73] :: declarator ---> pointer_opt direct_declarator
[Line No. 73] :: type_specifier ---> short
[Line No. 73] :: specifier_qualifier_list_opt ---> epsilon
[Line No. 73] :: specifier_qualifier_list ---> type_specifier specifier_qualifier_list_opt
[Line No. 73] :: type_name ---> specifier_qualifier_list
[Line No. 73] :: unary_expression ---> sizeof ( type_name )
[Line No. 73] :: cast_expression ---> unary_expression
[Line No. 73] :: multiplicative_expression ---> cast_expression
[Line No. 73] :: additive_expression ---> multiplicative_expression
[Line No. 73] :: shift_expression ---> additive_expression
[Line No. 73] :: relational_expression ---> shift_expression
[Line No. 73] :: equality_expression ---> relational_expression
[Line No. 73] :: AND_expression ---> equality_expression
[Line No. 73] :: exclusive_OR_expression ---> AND_expression
[Line No. 73] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 73] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 73] :: logical_OR_expression ---> logical_AND_expression
[Line No. 73] :: conditional_expression ---> logical_OR_expression
[Line No. 73] :: assignment_expression ---> conditional_expression
[Line No. 73] :: initialiser ---> assignment_expression
[Line No. 73] :: init_declarator ---> declarator = initialiser
[Line No. 73] :: init_declarator_list ---> init_declarator
[Line No. 73] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 73] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 73] :: block_item ---> declaration
[Line No. 73] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 74 getting parsed  --------------------


-------------------- Line No. 75 getting parsed  --------------------


-------------------- Line No. 76 getting parsed  --------------------

[Line No. 76] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 76] :: postfix_expression ---> primary_expression
[Line No. 76] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "%d "
[Line No. 76] :: postfix_expression ---> primary_expression
[Line No. 76] :: unary_expression ---> postfix_expression
[Line No. 76] :: cast_expression ---> unary_expression
[Line No. 76] :: multiplicative_expression ---> cast_expression
[Line No. 76] :: additive_expression ---> multiplicative_expression
[Line No. 76] :: shift_expression ---> additive_expression
[Line No. 76] :: relational_expression ---> shift_expression
[Line No. 76] :: equality_expression ---> relational_expression
[Line No. 76] :: AND_expression ---> equality_expression
[Line No. 76] :: exclusive_OR_expression ---> AND_expression
[Line No. 76] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 76] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 76] :: logical_OR_expression ---> logical_AND_expression
[Line No. 76] :: conditional_expression ---> logical_OR_expression
[Line No. 76] :: assignment_expression ---> conditional_expression
[Line No. 76] :: argument_expression_list ---> assignment_expression
[Line No. 76] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n3
[Line No. 76] :: postfix_expression ---> primary_expression
[Line No. 76] :: unary_expression ---> postfix_expression
[Line No. 76] :: cast_expression ---> unary_expression
[Line No. 76] :: multiplicative_expression ---> cast_expression
[Line No. 76] :: additive_expression ---> multiplicative_expression
[Line No. 76] :: shift_expression ---> additive_expression
[Line No. 76] :: relational_expression ---> shift_expression
[Line No. 76] :: equality_expression ---> relational_expression
[Line No. 76] :: AND_expression ---> equality_expression
[Line No. 76] :: exclusive_OR_expression ---> AND_expression
[Line No. 76] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 76] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 76] :: logical_OR_expression ---> logical_AND_expression
[Line No. 76] :: conditional_expression ---> logical_OR_expression
[Line No. 76] :: assignment_expression ---> conditional_expression
[Line No. 76] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 76] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 76] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 76] :: unary_expression ---> postfix_expression
[Line No. 76] :: cast_expression ---> unary_expression
[Line No. 76] :: multiplicative_expression ---> cast_expression
[Line No. 76] :: additive_expression ---> multiplicative_expression
[Line No. 76] :: shift_expression ---> additive_expression
[Line No. 76] :: relational_expression ---> shift_expression
[Line No. 76] :: equality_expression ---> relational_expression
[Line No. 76] :: AND_expression ---> equality_expression
[Line No. 76] :: exclusive_OR_expression ---> AND_expression
[Line No. 76] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 76] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 76] :: logical_OR_expression ---> logical_AND_expression
[Line No. 76] :: conditional_expression ---> logical_OR_expression
[Line No. 76] :: assignment_expression ---> conditional_expression
[Line No. 76] :: expression ---> assignment_expression
[Line No. 76] :: expression_opt ---> expression
[Line No. 76] :: expression_statement ---> expression_opt ;
[Line No. 76] :: statement ---> expression_statement
[Line No. 76] :: block_item ---> statement
[Line No. 76] :: block_item_list ---> block_item

-------------------- Line No. 77 getting parsed  --------------------

[Line No. 77] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n3
[Line No. 77] :: postfix_expression ---> primary_expression
[Line No. 77] :: postfix_expression ---> postfix_expression ++
[Line No. 77] :: unary_expression ---> postfix_expression
[Line No. 77] :: cast_expression ---> unary_expression
[Line No. 77] :: multiplicative_expression ---> cast_expression
[Line No. 77] :: additive_expression ---> multiplicative_expression
[Line No. 77] :: shift_expression ---> additive_expression
[Line No. 77] :: relational_expression ---> shift_expression
[Line No. 77] :: equality_expression ---> relational_expression
[Line No. 77] :: AND_expression ---> equality_expression
[Line No. 77] :: exclusive_OR_expression ---> AND_expression
[Line No. 77] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 77] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 77] :: logical_OR_expression ---> logical_AND_expression
[Line No. 77] :: conditional_expression ---> logical_OR_expression
[Line No. 77] :: assignment_expression ---> conditional_expression
[Line No. 77] :: expression ---> assignment_expression
[Line No. 77] :: expression_opt ---> expression
[Line No. 77] :: expression_statement ---> expression_opt ;
[Line No. 77] :: statement ---> expression_statement
[Line No. 77] :: block_item ---> statement
[Line No. 77] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 78 getting parsed  --------------------

[Line No. 78] :: block_item_list_opt ---> block_item_list
[Line No. 78] :: compound_statement ---> { block_item_list_opt }
[Line No. 78] :: statement ---> compound_statement
[Line No. 78] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n3
[Line No. 78] :: postfix_expression ---> primary_expression
[Line No. 78] :: unary_expression ---> postfix_expression
[Line No. 78] :: cast_expression ---> unary_expression
[Line No. 78] :: multiplicative_expression ---> cast_expression
[Line No. 78] :: additive_expression ---> multiplicative_expression
[Line No. 78] :: shift_expression ---> additive_expression
[Line No. 78] :: relational_expression ---> shift_expression
[Line No. 78] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 78] :: postfix_expression ---> primary_expression
[Line No. 78] :: unary_expression ---> postfix_expression
[Line No. 78] :: cast_expression ---> unary_expression
[Line No. 78] :: multiplicative_expression ---> cast_expression
[Line No. 78] :: additive_expression ---> multiplicative_expression
[Line No. 78] :: shift_expression ---> additive_expression
[Line No. 78] :: relational_expression ---> relational_expression < shift_expression
[Line No. 78] :: equality_expression ---> relational_expression
[Line No. 78] :: AND_expression ---> equality_expression
[Line No. 78] :: exclusive_OR_expression ---> AND_expression
[Line No. 78] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 78] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 78] :: logical_OR_expression ---> logical_AND_expression
[Line No. 78] :: conditional_expression ---> logical_OR_expression
[Line No. 78] :: assignment_expression ---> conditional_expression
[Line No. 78] :: expression ---> assignment_expression
[Line No. 78] :: iteration_statement ---> do statement while ( expression ) ;
[Line No. 78] :: statement ---> iteration_statement
[Line No. 78] :: block_item ---> statement
[Line No. 78] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 79 getting parsed  --------------------


-------------------- Line No. 80 getting parsed  --------------------

[Line No. 80] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 80] :: postfix_expression ---> primary_expression
[Line No. 80] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "\n"
[Line No. 80] :: postfix_expression ---> primary_expression
[Line No. 80] :: unary_expression ---> postfix_expression
[Line No. 80] :: cast_expression ---> unary_expression
[Line No. 80] :: multiplicative_expression ---> cast_expression
[Line No. 80] :: additive_expression ---> multiplicative_expression
[Line No. 80] :: shift_expression ---> additive_expression
[Line No. 80] :: relational_expression ---> shift_expression
[Line No. 80] :: equality_expression ---> relational_expression
[Line No. 80] :: AND_expression ---> equality_expression
[Line No. 80] :: exclusive_OR_expression ---> AND_expression
[Line No. 80] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 80] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 80] :: logical_OR_expression ---> logical_AND_expression
[Line No. 80] :: conditional_expression ---> logical_OR_expression
[Line No. 80] :: assignment_expression ---> conditional_expression
[Line No. 80] :: argument_expression_list ---> assignment_expression
[Line No. 80] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 80] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 80] :: unary_expression ---> postfix_expression
[Line No. 80] :: cast_expression ---> unary_expression
[Line No. 80] :: multiplicative_expression ---> cast_expression
[Line No. 80] :: additive_expression ---> multiplicative_expression
[Line No. 80] :: shift_expression ---> additive_expression
[Line No. 80] :: relational_expression ---> shift_expression
[Line No. 80] :: equality_expression ---> relational_expression
[Line No. 80] :: AND_expression ---> equality_expression
[Line No. 80] :: exclusive_OR_expression ---> AND_expression
[Line No. 80] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 80] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 80] :: logical_OR_expression ---> logical_AND_expression
[Line No. 80] :: conditional_expression ---> logical_OR_expression
[Line No. 80] :: assignment_expression ---> conditional_expression
[Line No. 80] :: expression ---> assignment_expression
[Line No. 80] :: expression_opt ---> expression
[Line No. 80] :: expression_statement ---> expression_opt ;
[Line No. 80] :: statement ---> expression_statement
[Line No. 80] :: labeled_statement ---> IDENTIFIER : statement
				IDENTIFIER = label
[Line No. 80] :: statement ---> labeled_statement
[Line No. 80] :: block_item ---> statement
[Line No. 80] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 81 getting parsed  --------------------

[Line No. 81] :: type_qualifier ---> volatile
[Line No. 81] :: type_specifier ---> int
[Line No. 81] :: declaration_specifiers_opt ---> epsilon 
[Line No. 81] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 81] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 81] :: declaration_specifiers ---> type_qualifier declaration_specifiers_opt
[Line No. 81] :: pointer_opt ---> epsilon
[Line No. 81] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n4
[Line No. 81] :: declarator ---> pointer_opt direct_declarator
[Line No. 81] :: type_qualifier ---> volatile
[Line No. 81] :: type_specifier ---> int
[Line No. 81] :: specifier_qualifier_list_opt ---> epsilon
[Line No. 81] :: specifier_qualifier_list ---> type_specifier specifier_qualifier_list_opt
[Line No. 81] :: specifier_qualifier_list_opt ---> specifier_qualifier_list
[Line No. 81] :: specifier_qualifier_list ---> type_qualifier specifier_qualifier_list_opt
[Line No. 81] :: type_name ---> specifier_qualifier_list
[Line No. 81] :: unary_expression ---> sizeof ( type_name )
[Line No. 81] :: cast_expression ---> unary_expression
[Line No. 81] :: multiplicative_expression ---> cast_expression
[Line No. 81] :: additive_expression ---> multiplicative_expression
[Line No. 81] :: shift_expression ---> additive_expression
[Line No. 81] :: relational_expression ---> shift_expression
[Line No. 81] :: equality_expression ---> relational_expression
[Line No. 81] :: AND_expression ---> equality_expression
[Line No. 81] :: exclusive_OR_expression ---> AND_expression
[Line No. 81] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 81] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 81] :: logical_OR_expression ---> logical_AND_expression
[Line No. 81] :: conditional_expression ---> logical_OR_expression
[Line No. 81] :: assignment_expression ---> conditional_expression
[Line No. 81] :: initialiser ---> assignment_expression
[Line No. 81] :: init_declarator ---> declarator = initialiser
[Line No. 81] :: init_declarator_list ---> init_declarator
[Line No. 81] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 81] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 81] :: block_item ---> declaration
[Line No. 81] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 82 getting parsed  --------------------

[Line No. 82] :: storage_class_specifier ---> auto
[Line No. 82] :: declaration_specifiers_opt ---> epsilon 
[Line No. 82] :: declaration_specifiers ---> storage_class_specifier declaration_specifiers_opt
[Line No. 82] :: pointer_opt ---> epsilon
[Line No. 82] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n5
[Line No. 82] :: declarator ---> pointer_opt direct_declarator
[Line No. 82] :: type_specifier ---> int
[Line No. 82] :: specifier_qualifier_list_opt ---> epsilon
[Line No. 82] :: specifier_qualifier_list ---> type_specifier specifier_qualifier_list_opt
[Line No. 82] :: type_name ---> specifier_qualifier_list
[Line No. 82] :: unary_expression ---> sizeof ( type_name )
[Line No. 82] :: cast_expression ---> unary_expression
[Line No. 82] :: multiplicative_expression ---> cast_expression
[Line No. 82] :: additive_expression ---> multiplicative_expression
[Line No. 82] :: shift_expression ---> additive_expression
[Line No. 82] :: relational_expression ---> shift_expression
[Line No. 82] :: equality_expression ---> relational_expression
[Line No. 82] :: AND_expression ---> equality_expression
[Line No. 82] :: exclusive_OR_expression ---> AND_expression
[Line No. 82] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 82] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 82] :: logical_OR_expression ---> logical_AND_expression
[Line No. 82] :: conditional_expression ---> logical_OR_expression
[Line No. 82] :: assignment_expression ---> conditional_expression
[Line No. 82] :: initialiser ---> assignment_expression
[Line No. 82] :: init_declarator ---> declarator = initialiser
[Line No. 82] :: init_declarator_list ---> init_declarator
[Line No. 82] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 82] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 82] :: block_item ---> declaration
[Line No. 82] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 83 getting parsed  --------------------

[Line No. 83] :: storage_class_specifier ---> register
[Line No. 83] :: type_specifier ---> int
[Line No. 83] :: declaration_specifiers_opt ---> epsilon 
[Line No. 83] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 83] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 83] :: declaration_specifiers ---> storage_class_specifier declaration_specifiers_opt
[Line No. 83] :: pointer_opt ---> epsilon
[Line No. 83] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n6
[Line No. 83] :: declarator ---> pointer_opt direct_declarator
[Line No. 83] :: type_specifier ---> int
[Line No. 83] :: specifier_qualifier_list_opt ---> epsilon
[Line No. 83] :: specifier_qualifier_list ---> type_specifier specifier_qualifier_list_opt
[Line No. 83] :: type_name ---> specifier_qualifier_list
[Line No. 83] :: unary_expression ---> sizeof ( type_name )
[Line No. 83] :: cast_expression ---> unary_expression
[Line No. 83] :: multiplicative_expression ---> cast_expression
[Line No. 83] :: additive_expression ---> multiplicative_expression
[Line No. 83] :: shift_expression ---> additive_expression
[Line No. 83] :: relational_expression ---> shift_expression
[Line No. 83] :: equality_expression ---> relational_expression
[Line No. 83] :: AND_expression ---> equality_expression
[Line No. 83] :: exclusive_OR_expression ---> AND_expression
[Line No. 83] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 83] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 83] :: logical_OR_expression ---> logical_AND_expression
[Line No. 83] :: conditional_expression ---> logical_OR_expression
[Line No. 83] :: assignment_expression ---> conditional_expression
[Line No. 83] :: initialiser ---> assignment_expression
[Line No. 83] :: init_declarator ---> declarator = initialiser
[Line No. 83] :: init_declarator_list ---> init_declarator
[Line No. 83] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 83] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 83] :: block_item ---> declaration
[Line No. 83] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 84 getting parsed  --------------------

[Line No. 84] :: type_specifier ---> int
[Line No. 84] :: declaration_specifiers_opt ---> epsilon 
[Line No. 84] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 84] :: pointer_opt ---> epsilon
[Line No. 84] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 84] :: declarator ---> pointer_opt direct_declarator
[Line No. 84] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 84] :: postfix_expression ---> primary_expression
[Line No. 84] :: unary_expression ---> postfix_expression
[Line No. 84] :: cast_expression ---> unary_expression
[Line No. 84] :: multiplicative_expression ---> cast_expression
[Line No. 84] :: additive_expression ---> multiplicative_expression
[Line No. 84] :: shift_expression ---> additive_expression
[Line No. 84] :: relational_expression ---> shift_expression
[Line No. 84] :: equality_expression ---> relational_expression
[Line No. 84] :: AND_expression ---> equality_expression
[Line No. 84] :: exclusive_OR_expression ---> AND_expression
[Line No. 84] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 84] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 84] :: logical_OR_expression ---> logical_AND_expression
[Line No. 84] :: conditional_expression ---> logical_OR_expression
[Line No. 84] :: assignment_expression ---> conditional_expression
[Line No. 84] :: initialiser ---> assignment_expression
[Line No. 84] :: init_declarator ---> declarator = initialiser
[Line No. 84] :: init_declarator_list ---> init_declarator
[Line No. 84] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 84] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 84] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 84] :: postfix_expression ---> primary_expression
[Line No. 84] :: unary_expression ---> postfix_expression
[Line No. 84] :: cast_expression ---> unary_expression
[Line No. 84] :: multiplicative_expression ---> cast_expression
[Line No. 84] :: additive_expression ---> multiplicative_expression
[Line No. 84] :: shift_expression ---> additive_expression
[Line No. 84] :: relational_expression ---> shift_expression
[Line No. 84] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 84] :: postfix_expression ---> primary_expression
[Line No. 84] :: unary_expression ---> postfix_expression
[Line No. 84] :: cast_expression ---> unary_expression
[Line No. 84] :: multiplicative_expression ---> cast_expression
[Line No. 84] :: additive_expression ---> multiplicative_expression
[Line No. 84] :: shift_expression ---> additive_expression
[Line No. 84] :: relational_expression ---> relational_expression <= shift_expression
[Line No. 84] :: equality_expression ---> relational_expression
[Line No. 84] :: AND_expression ---> equality_expression
[Line No. 84] :: exclusive_OR_expression ---> AND_expression
[Line No. 84] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 84] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 84] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 84] :: postfix_expression ---> primary_expression
[Line No. 84] :: unary_expression ---> postfix_expression
[Line No. 84] :: cast_expression ---> unary_expression
[Line No. 84] :: multiplicative_expression ---> cast_expression
[Line No. 84] :: additive_expression ---> multiplicative_expression
[Line No. 84] :: shift_expression ---> additive_expression
[Line No. 84] :: relational_expression ---> shift_expression
[Line No. 84] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 84] :: postfix_expression ---> primary_expression
[Line No. 84] :: unary_expression ---> postfix_expression
[Line No. 84] :: cast_expression ---> unary_expression
[Line No. 84] :: multiplicative_expression ---> cast_expression
[Line No. 84] :: additive_expression ---> multiplicative_expression
[Line No. 84] :: shift_expression ---> additive_expression
[Line No. 84] :: relational_expression ---> relational_expression >= shift_expression
[Line No. 84] :: equality_expression ---> relational_expression
[Line No. 84] :: AND_expression ---> equality_expression
[Line No. 84] :: exclusive_OR_expression ---> AND_expression
[Line No. 84] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 84] :: logical_AND_expression ---> logical_AND_expression && inclusive_OR_expression
[Line No. 84] :: logical_OR_expression ---> logical_AND_expression
[Line No. 84] :: conditional_expression ---> logical_OR_expression
[Line No. 84] :: assignment_expression ---> conditional_expression
[Line No. 84] :: expression ---> assignment_expression
[Line No. 84] :: expression_opt ---> expression
[Line No. 84] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = i
[Line No. 84] :: postfix_expression ---> primary_expression
[Line No. 84] :: postfix_expression ---> postfix_expression ++
[Line No. 84] :: unary_expression ---> postfix_expression
[Line No. 84] :: cast_expression ---> unary_expression
[Line No. 84] :: multiplicative_expression ---> cast_expression
[Line No. 84] :: additive_expression ---> multiplicative_expression
[Line No. 84] :: shift_expression ---> additive_expression
[Line No. 84] :: relational_expression ---> shift_expression
[Line No. 84] :: equality_expression ---> relational_expression
[Line No. 84] :: AND_expression ---> equality_expression
[Line No. 84] :: exclusive_OR_expression ---> AND_expression
[Line No. 84] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 84] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 84] :: logical_OR_expression ---> logical_AND_expression
[Line No. 84] :: conditional_expression ---> logical_OR_expression
[Line No. 84] :: assignment_expression ---> conditional_expression
[Line No. 84] :: expression ---> assignment_expression
[Line No. 84] :: expression_opt ---> expression

-------------------- Line No. 85 getting parsed  --------------------


-------------------- Line No. 86 getting parsed  --------------------

[Line No. 86] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 86] :: postfix_expression ---> primary_expression
[Line No. 86] :: unary_expression ---> postfix_expression
[Line No. 86] :: assignment_operator ---> /=
[Line No. 86] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 86] :: postfix_expression ---> primary_expression
[Line No. 86] :: unary_expression ---> postfix_expression
[Line No. 86] :: cast_expression ---> unary_expression
[Line No. 86] :: multiplicative_expression ---> cast_expression
[Line No. 86] :: additive_expression ---> multiplicative_expression
[Line No. 86] :: shift_expression ---> additive_expression
[Line No. 86] :: relational_expression ---> shift_expression
[Line No. 86] :: equality_expression ---> relational_expression
[Line No. 86] :: AND_expression ---> equality_expression
[Line No. 86] :: exclusive_OR_expression ---> AND_expression
[Line No. 86] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 86] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 86] :: logical_OR_expression ---> logical_AND_expression
[Line No. 86] :: conditional_expression ---> logical_OR_expression
[Line No. 86] :: assignment_expression ---> conditional_expression
[Line No. 86] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 86] :: expression ---> assignment_expression
[Line No. 86] :: expression_opt ---> expression
[Line No. 86] :: expression_statement ---> expression_opt ;
[Line No. 86] :: statement ---> expression_statement
[Line No. 86] :: block_item ---> statement
[Line No. 86] :: block_item_list ---> block_item

-------------------- Line No. 87 getting parsed  --------------------

[Line No. 87] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 87] :: postfix_expression ---> primary_expression
[Line No. 87] :: unary_expression ---> postfix_expression
[Line No. 87] :: assignment_operator ---> *=
[Line No. 87] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 87] :: postfix_expression ---> primary_expression
[Line No. 87] :: unary_expression ---> postfix_expression
[Line No. 87] :: cast_expression ---> unary_expression
[Line No. 87] :: multiplicative_expression ---> cast_expression
[Line No. 87] :: additive_expression ---> multiplicative_expression
[Line No. 87] :: shift_expression ---> additive_expression
[Line No. 87] :: relational_expression ---> shift_expression
[Line No. 87] :: equality_expression ---> relational_expression
[Line No. 87] :: AND_expression ---> equality_expression
[Line No. 87] :: exclusive_OR_expression ---> AND_expression
[Line No. 87] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 87] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 87] :: logical_OR_expression ---> logical_AND_expression
[Line No. 87] :: conditional_expression ---> logical_OR_expression
[Line No. 87] :: assignment_expression ---> conditional_expression
[Line No. 87] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 87] :: expression ---> assignment_expression
[Line No. 87] :: expression_opt ---> expression
[Line No. 87] :: expression_statement ---> expression_opt ;
[Line No. 87] :: statement ---> expression_statement
[Line No. 87] :: block_item ---> statement
[Line No. 87] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 88 getting parsed  --------------------

[Line No. 88] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 88] :: postfix_expression ---> primary_expression
[Line No. 88] :: unary_expression ---> postfix_expression
[Line No. 88] :: cast_expression ---> unary_expression
[Line No. 88] :: multiplicative_expression ---> cast_expression
[Line No. 88] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 88] :: postfix_expression ---> primary_expression
[Line No. 88] :: unary_expression ---> postfix_expression
[Line No. 88] :: cast_expression ---> unary_expression
[Line No. 88] :: multiplicative_expression ---> multiplicative_expression % cast_expression
[Line No. 88] :: additive_expression ---> multiplicative_expression
[Line No. 88] :: shift_expression ---> additive_expression
[Line No. 88] :: relational_expression ---> shift_expression
[Line No. 88] :: equality_expression ---> relational_expression
[Line No. 88] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 88] :: postfix_expression ---> primary_expression
[Line No. 88] :: unary_expression ---> postfix_expression
[Line No. 88] :: cast_expression ---> unary_expression
[Line No. 88] :: multiplicative_expression ---> cast_expression
[Line No. 88] :: additive_expression ---> multiplicative_expression
[Line No. 88] :: shift_expression ---> additive_expression
[Line No. 88] :: relational_expression ---> shift_expression
[Line No. 88] :: equality_expression ---> equality_expression == relational_expression
[Line No. 88] :: AND_expression ---> equality_expression
[Line No. 88] :: exclusive_OR_expression ---> AND_expression
[Line No. 88] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 88] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 88] :: logical_OR_expression ---> logical_AND_expression
[Line No. 88] :: conditional_expression ---> logical_OR_expression
[Line No. 88] :: assignment_expression ---> conditional_expression
[Line No. 88] :: expression ---> assignment_expression

-------------------- Line No. 89 getting parsed  --------------------

[Line No. 89] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 89] :: postfix_expression ---> primary_expression
[Line No. 89] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "n = %d\n"
[Line No. 89] :: postfix_expression ---> primary_expression
[Line No. 89] :: unary_expression ---> postfix_expression
[Line No. 89] :: cast_expression ---> unary_expression
[Line No. 89] :: multiplicative_expression ---> cast_expression
[Line No. 89] :: additive_expression ---> multiplicative_expression
[Line No. 89] :: shift_expression ---> additive_expression
[Line No. 89] :: relational_expression ---> shift_expression
[Line No. 89] :: equality_expression ---> relational_expression
[Line No. 89] :: AND_expression ---> equality_expression
[Line No. 89] :: exclusive_OR_expression ---> AND_expression
[Line No. 89] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 89] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 89] :: logical_OR_expression ---> logical_AND_expression
[Line No. 89] :: conditional_expression ---> logical_OR_expression
[Line No. 89] :: assignment_expression ---> conditional_expression
[Line No. 89] :: argument_expression_list ---> assignment_expression
[Line No. 89] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 89] :: postfix_expression ---> primary_expression
[Line No. 89] :: unary_expression ---> postfix_expression
[Line No. 89] :: cast_expression ---> unary_expression
[Line No. 89] :: multiplicative_expression ---> cast_expression
[Line No. 89] :: additive_expression ---> multiplicative_expression
[Line No. 89] :: shift_expression ---> additive_expression
[Line No. 89] :: relational_expression ---> shift_expression
[Line No. 89] :: equality_expression ---> relational_expression
[Line No. 89] :: AND_expression ---> equality_expression
[Line No. 89] :: exclusive_OR_expression ---> AND_expression
[Line No. 89] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 89] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 89] :: logical_OR_expression ---> logical_AND_expression
[Line No. 89] :: conditional_expression ---> logical_OR_expression
[Line No. 89] :: assignment_expression ---> conditional_expression
[Line No. 89] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 89] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 89] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 89] :: unary_expression ---> postfix_expression
[Line No. 89] :: cast_expression ---> unary_expression
[Line No. 89] :: multiplicative_expression ---> cast_expression
[Line No. 89] :: additive_expression ---> multiplicative_expression
[Line No. 89] :: shift_expression ---> additive_expression
[Line No. 89] :: relational_expression ---> shift_expression
[Line No. 89] :: equality_expression ---> relational_expression
[Line No. 89] :: AND_expression ---> equality_expression
[Line No. 89] :: exclusive_OR_expression ---> AND_expression
[Line No. 89] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 89] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 89] :: logical_OR_expression ---> logical_AND_expression
[Line No. 89] :: conditional_expression ---> logical_OR_expression
[Line No. 89] :: assignment_expression ---> conditional_expression
[Line No. 89] :: expression ---> assignment_expression
[Line No. 89] :: expression_opt ---> expression
[Line No. 89] :: expression_statement ---> expression_opt ;
[Line No. 89] :: statement ---> expression_statement

-------------------- Line No. 90 getting parsed  --------------------


-------------------- Line No. 91 getting parsed  --------------------


-------------------- Line No. 92 getting parsed  --------------------

[Line No. 92] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 92] :: postfix_expression ---> primary_expression
[Line No. 92] :: unary_expression ---> postfix_expression
[Line No. 92] :: assignment_operator ---> =
[Line No. 92] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 92] :: postfix_expression ---> primary_expression
[Line No. 92] :: unary_expression ---> postfix_expression
[Line No. 92] :: cast_expression ---> unary_expression
[Line No. 92] :: multiplicative_expression ---> cast_expression
[Line No. 92] :: additive_expression ---> multiplicative_expression
[Line No. 92] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 92] :: postfix_expression ---> primary_expression
[Line No. 92] :: unary_expression ---> postfix_expression
[Line No. 92] :: cast_expression ---> unary_expression
[Line No. 92] :: multiplicative_expression ---> cast_expression
[Line No. 92] :: additive_expression ---> additive_expression + multiplicative_expression
[Line No. 92] :: unary_operator ---> -
[Line No. 92] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 92] :: postfix_expression ---> primary_expression
[Line No. 92] :: unary_expression ---> postfix_expression
[Line No. 92] :: cast_expression ---> unary_expression
[Line No. 92] :: unary_expression ---> unary_operator cast_expression
[Line No. 92] :: cast_expression ---> unary_expression
[Line No. 92] :: multiplicative_expression ---> cast_expression
[Line No. 92] :: additive_expression ---> multiplicative_expression
[Line No. 92] :: shift_expression ---> additive_expression
[Line No. 92] :: relational_expression ---> shift_expression
[Line No. 92] :: equality_expression ---> relational_expression
[Line No. 92] :: AND_expression ---> equality_expression
[Line No. 92] :: exclusive_OR_expression ---> AND_expression
[Line No. 92] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 92] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 92] :: logical_OR_expression ---> logical_AND_expression
[Line No. 92] :: conditional_expression ---> logical_OR_expression
[Line No. 92] :: assignment_expression ---> conditional_expression
[Line No. 92] :: expression ---> assignment_expression
[Line No. 92] :: primary_expression ---> ( expression )
[Line No. 92] :: postfix_expression ---> primary_expression
[Line No. 92] :: unary_expression ---> postfix_expression
[Line No. 92] :: cast_expression ---> unary_expression
[Line No. 92] :: multiplicative_expression ---> cast_expression
[Line No. 92] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 92] :: postfix_expression ---> primary_expression
[Line No. 92] :: unary_expression ---> postfix_expression
[Line No. 92] :: cast_expression ---> unary_expression
[Line No. 92] :: multiplicative_expression ---> multiplicative_expression / cast_expression
[Line No. 92] :: additive_expression ---> additive_expression + multiplicative_expression
[Line No. 92] :: shift_expression ---> additive_expression
[Line No. 92] :: relational_expression ---> shift_expression
[Line No. 92] :: equality_expression ---> relational_expression
[Line No. 92] :: AND_expression ---> equality_expression
[Line No. 92] :: exclusive_OR_expression ---> AND_expression
[Line No. 92] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 92] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 92] :: logical_OR_expression ---> logical_AND_expression
[Line No. 92] :: conditional_expression ---> logical_OR_expression
[Line No. 92] :: assignment_expression ---> conditional_expression
[Line No. 92] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 92] :: expression ---> assignment_expression
[Line No. 92] :: expression_opt ---> expression
[Line No. 92] :: expression_statement ---> expression_opt ;
[Line No. 92] :: statement ---> expression_statement
[Line No. 92] :: block_item ---> statement
[Line No. 92] :: block_item_list ---> block_item

-------------------- Line No. 93 getting parsed  --------------------

[Line No. 93] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 93] :: postfix_expression ---> primary_expression
[Line No. 93] :: unary_expression ---> postfix_expression
[Line No. 93] :: assignment_operator ---> <<=
[Line No. 93] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 93] :: postfix_expression ---> primary_expression
[Line No. 93] :: unary_expression ---> postfix_expression
[Line No. 93] :: cast_expression ---> unary_expression
[Line No. 93] :: multiplicative_expression ---> cast_expression
[Line No. 93] :: additive_expression ---> multiplicative_expression
[Line No. 93] :: shift_expression ---> additive_expression
[Line No. 93] :: relational_expression ---> shift_expression
[Line No. 93] :: equality_expression ---> relational_expression
[Line No. 93] :: AND_expression ---> equality_expression
[Line No. 93] :: exclusive_OR_expression ---> AND_expression
[Line No. 93] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 93] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 93] :: logical_OR_expression ---> logical_AND_expression
[Line No. 93] :: conditional_expression ---> logical_OR_expression
[Line No. 93] :: assignment_expression ---> conditional_expression
[Line No. 93] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 93] :: expression ---> assignment_expression
[Line No. 93] :: expression_opt ---> expression
[Line No. 93] :: expression_statement ---> expression_opt ;
[Line No. 93] :: statement ---> expression_statement
[Line No. 93] :: block_item ---> statement
[Line No. 93] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 94 getting parsed  --------------------

[Line No. 94] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 94] :: postfix_expression ---> primary_expression
[Line No. 94] :: unary_expression ---> postfix_expression
[Line No. 94] :: assignment_operator ---> >>=
[Line No. 94] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 94] :: postfix_expression ---> primary_expression
[Line No. 94] :: unary_expression ---> postfix_expression
[Line No. 94] :: cast_expression ---> unary_expression
[Line No. 94] :: multiplicative_expression ---> cast_expression
[Line No. 94] :: additive_expression ---> multiplicative_expression
[Line No. 94] :: shift_expression ---> additive_expression
[Line No. 94] :: relational_expression ---> shift_expression
[Line No. 94] :: equality_expression ---> relational_expression
[Line No. 94] :: AND_expression ---> equality_expression
[Line No. 94] :: exclusive_OR_expression ---> AND_expression
[Line No. 94] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 94] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 94] :: logical_OR_expression ---> logical_AND_expression
[Line No. 94] :: conditional_expression ---> logical_OR_expression
[Line No. 94] :: assignment_expression ---> conditional_expression
[Line No. 94] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 94] :: expression ---> assignment_expression
[Line No. 94] :: expression_opt ---> expression
[Line No. 94] :: expression_statement ---> expression_opt ;
[Line No. 94] :: statement ---> expression_statement
[Line No. 94] :: block_item ---> statement
[Line No. 94] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 95 getting parsed  --------------------

[Line No. 95] :: block_item_list_opt ---> block_item_list
[Line No. 95] :: compound_statement ---> { block_item_list_opt }
[Line No. 95] :: statement ---> compound_statement
[Line No. 95] :: selection_statement ---> if ( expression ) statement else statement
[Line No. 95] :: statement ---> selection_statement
[Line No. 95] :: block_item ---> statement
[Line No. 95] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 96 getting parsed  --------------------

[Line No. 96] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 96] :: postfix_expression ---> primary_expression
[Line No. 96] :: unary_expression ---> postfix_expression
[Line No. 96] :: assignment_operator ---> += 
[Line No. 96] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 96] :: postfix_expression ---> primary_expression
[Line No. 96] :: unary_expression ---> postfix_expression
[Line No. 96] :: cast_expression ---> unary_expression
[Line No. 96] :: multiplicative_expression ---> cast_expression
[Line No. 96] :: additive_expression ---> multiplicative_expression
[Line No. 96] :: shift_expression ---> additive_expression
[Line No. 96] :: relational_expression ---> shift_expression
[Line No. 96] :: equality_expression ---> relational_expression
[Line No. 96] :: AND_expression ---> equality_expression
[Line No. 96] :: exclusive_OR_expression ---> AND_expression
[Line No. 96] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 96] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 96] :: logical_OR_expression ---> logical_AND_expression
[Line No. 96] :: conditional_expression ---> logical_OR_expression
[Line No. 96] :: assignment_expression ---> conditional_expression
[Line No. 96] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 96] :: expression ---> assignment_expression
[Line No. 96] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 96] :: postfix_expression ---> primary_expression
[Line No. 96] :: unary_expression ---> postfix_expression
[Line No. 96] :: assignment_operator ---> -= 
[Line No. 96] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 96] :: postfix_expression ---> primary_expression
[Line No. 96] :: unary_expression ---> postfix_expression
[Line No. 96] :: cast_expression ---> unary_expression
[Line No. 96] :: multiplicative_expression ---> cast_expression
[Line No. 96] :: additive_expression ---> multiplicative_expression
[Line No. 96] :: shift_expression ---> additive_expression
[Line No. 96] :: relational_expression ---> shift_expression
[Line No. 96] :: equality_expression ---> relational_expression
[Line No. 96] :: AND_expression ---> equality_expression
[Line No. 96] :: exclusive_OR_expression ---> AND_expression
[Line No. 96] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 96] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 96] :: logical_OR_expression ---> logical_AND_expression
[Line No. 96] :: conditional_expression ---> logical_OR_expression
[Line No. 96] :: assignment_expression ---> conditional_expression
[Line No. 96] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 96] :: expression ---> expression , assignment_expression
[Line No. 96] :: expression_opt ---> expression
[Line No. 96] :: expression_statement ---> expression_opt ;
[Line No. 96] :: statement ---> expression_statement
[Line No. 96] :: block_item ---> statement
[Line No. 96] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 97 getting parsed  --------------------

[Line No. 97] :: type_specifier ---> int
[Line No. 97] :: declaration_specifiers_opt ---> epsilon 
[Line No. 97] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 97] :: pointer_opt ---> epsilon
[Line No. 97] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 97] :: declarator ---> pointer_opt direct_declarator
[Line No. 97] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 100
[Line No. 97] :: postfix_expression ---> primary_expression
[Line No. 97] :: unary_expression ---> postfix_expression
[Line No. 97] :: cast_expression ---> unary_expression
[Line No. 97] :: multiplicative_expression ---> cast_expression
[Line No. 97] :: additive_expression ---> multiplicative_expression
[Line No. 97] :: shift_expression ---> additive_expression
[Line No. 97] :: relational_expression ---> shift_expression
[Line No. 97] :: equality_expression ---> relational_expression
[Line No. 97] :: AND_expression ---> equality_expression
[Line No. 97] :: exclusive_OR_expression ---> AND_expression
[Line No. 97] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 97] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 97] :: logical_OR_expression ---> logical_AND_expression
[Line No. 97] :: conditional_expression ---> logical_OR_expression
[Line No. 97] :: assignment_expression ---> conditional_expression
[Line No. 97] :: initialiser ---> assignment_expression
[Line No. 97] :: init_declarator ---> declarator = initialiser
[Line No. 97] :: init_declarator_list ---> init_declarator
[Line No. 97] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 97] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 97] :: block_item ---> declaration
[Line No. 97] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 98 getting parsed  --------------------

[Line No. 98] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 98] :: postfix_expression ---> primary_expression
[Line No. 98] :: unary_expression ---> postfix_expression
[Line No. 98] :: assignment_operator ---> += 
[Line No. 98] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 98] :: postfix_expression ---> primary_expression
[Line No. 98] :: unary_expression ---> postfix_expression
[Line No. 98] :: cast_expression ---> unary_expression
[Line No. 98] :: multiplicative_expression ---> cast_expression
[Line No. 98] :: additive_expression ---> multiplicative_expression
[Line No. 98] :: shift_expression ---> additive_expression
[Line No. 98] :: relational_expression ---> shift_expression
[Line No. 98] :: equality_expression ---> relational_expression
[Line No. 98] :: AND_expression ---> equality_expression
[Line No. 98] :: exclusive_OR_expression ---> AND_expression
[Line No. 98] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 98] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 98] :: logical_OR_expression ---> logical_AND_expression
[Line No. 98] :: conditional_expression ---> logical_OR_expression
[Line No. 98] :: assignment_expression ---> conditional_expression
[Line No. 98] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 98] :: expression ---> assignment_expression
[Line No. 98] :: expression_opt ---> expression
[Line No. 98] :: expression_statement ---> expression_opt ;
[Line No. 98] :: statement ---> expression_statement
[Line No. 98] :: block_item ---> statement
[Line No. 98] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 99 getting parsed  --------------------

[Line No. 99] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 99] :: postfix_expression ---> primary_expression
[Line No. 99] :: unary_expression ---> postfix_expression
[Line No. 99] :: assignment_operator ---> -= 
[Line No. 99] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 99] :: postfix_expression ---> primary_expression
[Line No. 99] :: unary_expression ---> postfix_expression
[Line No. 99] :: cast_expression ---> unary_expression
[Line No. 99] :: multiplicative_expression ---> cast_expression
[Line No. 99] :: additive_expression ---> multiplicative_expression
[Line No. 99] :: shift_expression ---> additive_expression
[Line No. 99] :: relational_expression ---> shift_expression
[Line No. 99] :: equality_expression ---> relational_expression
[Line No. 99] :: AND_expression ---> equality_expression
[Line No. 99] :: exclusive_OR_expression ---> AND_expression
[Line No. 99] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 99] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 99] :: logical_OR_expression ---> logical_AND_expression
[Line No. 99] :: conditional_expression ---> logical_OR_expression
[Line No. 99] :: assignment_expression ---> conditional_expression
[Line No. 99] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 99] :: expression ---> assignment_expression
[Line No. 99] :: expression_opt ---> expression
[Line No. 99] :: expression_statement ---> expression_opt ;
[Line No. 99] :: statement ---> expression_statement
[Line No. 99] :: block_item ---> statement
[Line No. 99] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 100 getting parsed  --------------------

[Line No. 100] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 100] :: postfix_expression ---> primary_expression
[Line No. 100] :: unary_expression ---> postfix_expression
[Line No. 100] :: assignment_operator ---> *=
[Line No. 100] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 100] :: postfix_expression ---> primary_expression
[Line No. 100] :: unary_expression ---> postfix_expression
[Line No. 100] :: cast_expression ---> unary_expression
[Line No. 100] :: multiplicative_expression ---> cast_expression
[Line No. 100] :: additive_expression ---> multiplicative_expression
[Line No. 100] :: shift_expression ---> additive_expression
[Line No. 100] :: relational_expression ---> shift_expression
[Line No. 100] :: equality_expression ---> relational_expression
[Line No. 100] :: AND_expression ---> equality_expression
[Line No. 100] :: exclusive_OR_expression ---> AND_expression
[Line No. 100] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 100] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 100] :: logical_OR_expression ---> logical_AND_expression
[Line No. 100] :: conditional_expression ---> logical_OR_expression
[Line No. 100] :: assignment_expression ---> conditional_expression
[Line No. 100] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 100] :: expression ---> assignment_expression
[Line No. 100] :: expression_opt ---> expression
[Line No. 100] :: expression_statement ---> expression_opt ;
[Line No. 100] :: statement ---> expression_statement
[Line No. 100] :: block_item ---> statement
[Line No. 100] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 101 getting parsed  --------------------

[Line No. 101] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 101] :: postfix_expression ---> primary_expression
[Line No. 101] :: unary_expression ---> postfix_expression
[Line No. 101] :: assignment_operator ---> /=
[Line No. 101] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 101] :: postfix_expression ---> primary_expression
[Line No. 101] :: unary_expression ---> postfix_expression
[Line No. 101] :: cast_expression ---> unary_expression
[Line No. 101] :: multiplicative_expression ---> cast_expression
[Line No. 101] :: additive_expression ---> multiplicative_expression
[Line No. 101] :: shift_expression ---> additive_expression
[Line No. 101] :: relational_expression ---> shift_expression
[Line No. 101] :: equality_expression ---> relational_expression
[Line No. 101] :: AND_expression ---> equality_expression
[Line No. 101] :: exclusive_OR_expression ---> AND_expression
[Line No. 101] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 101] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 101] :: logical_OR_expression ---> logical_AND_expression
[Line No. 101] :: conditional_expression ---> logical_OR_expression
[Line No. 101] :: assignment_expression ---> conditional_expression
[Line No. 101] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 101] :: expression ---> assignment_expression
[Line No. 101] :: expression_opt ---> expression
[Line No. 101] :: expression_statement ---> expression_opt ;
[Line No. 101] :: statement ---> expression_statement
[Line No. 101] :: block_item ---> statement
[Line No. 101] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 102 getting parsed  --------------------

[Line No. 102] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 102] :: postfix_expression ---> primary_expression
[Line No. 102] :: unary_expression ---> postfix_expression
[Line No. 102] :: assignment_operator ---> =
[Line No. 102] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 102] :: postfix_expression ---> primary_expression
[Line No. 102] :: unary_expression ---> postfix_expression
[Line No. 102] :: cast_expression ---> unary_expression
[Line No. 102] :: multiplicative_expression ---> cast_expression
[Line No. 102] :: additive_expression ---> multiplicative_expression
[Line No. 102] :: shift_expression ---> additive_expression
[Line No. 102] :: relational_expression ---> shift_expression
[Line No. 102] :: equality_expression ---> relational_expression
[Line No. 102] :: AND_expression ---> equality_expression
[Line No. 102] :: exclusive_OR_expression ---> AND_expression
[Line No. 102] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 102] :: postfix_expression ---> primary_expression
[Line No. 102] :: unary_expression ---> postfix_expression
[Line No. 102] :: cast_expression ---> unary_expression
[Line No. 102] :: multiplicative_expression ---> cast_expression
[Line No. 102] :: additive_expression ---> multiplicative_expression
[Line No. 102] :: shift_expression ---> additive_expression
[Line No. 102] :: relational_expression ---> shift_expression
[Line No. 102] :: equality_expression ---> relational_expression
[Line No. 102] :: AND_expression ---> equality_expression
[Line No. 102] :: exclusive_OR_expression ---> exclusive_OR_expression ^ AND_expression
[Line No. 102] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 102] :: postfix_expression ---> primary_expression
[Line No. 102] :: unary_expression ---> postfix_expression
[Line No. 102] :: cast_expression ---> unary_expression
[Line No. 102] :: multiplicative_expression ---> cast_expression
[Line No. 102] :: additive_expression ---> multiplicative_expression
[Line No. 102] :: shift_expression ---> additive_expression
[Line No. 102] :: relational_expression ---> shift_expression
[Line No. 102] :: equality_expression ---> relational_expression
[Line No. 102] :: AND_expression ---> equality_expression
[Line No. 102] :: exclusive_OR_expression ---> exclusive_OR_expression ^ AND_expression
[Line No. 102] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 102] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 102] :: logical_OR_expression ---> logical_AND_expression
[Line No. 102] :: conditional_expression ---> logical_OR_expression
[Line No. 102] :: assignment_expression ---> conditional_expression
[Line No. 102] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 102] :: expression ---> assignment_expression
[Line No. 102] :: expression_opt ---> expression
[Line No. 102] :: expression_statement ---> expression_opt ;
[Line No. 102] :: statement ---> expression_statement
[Line No. 102] :: block_item ---> statement
[Line No. 102] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 103 getting parsed  --------------------

[Line No. 103] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 103] :: postfix_expression ---> primary_expression
[Line No. 103] :: unary_expression ---> postfix_expression
[Line No. 103] :: assignment_operator ---> |=
[Line No. 103] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 103] :: postfix_expression ---> primary_expression
[Line No. 103] :: unary_expression ---> postfix_expression
[Line No. 103] :: cast_expression ---> unary_expression
[Line No. 103] :: multiplicative_expression ---> cast_expression
[Line No. 103] :: additive_expression ---> multiplicative_expression
[Line No. 103] :: shift_expression ---> additive_expression
[Line No. 103] :: relational_expression ---> shift_expression
[Line No. 103] :: equality_expression ---> relational_expression
[Line No. 103] :: AND_expression ---> equality_expression
[Line No. 103] :: exclusive_OR_expression ---> AND_expression
[Line No. 103] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 103] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 103] :: logical_OR_expression ---> logical_AND_expression
[Line No. 103] :: conditional_expression ---> logical_OR_expression
[Line No. 103] :: assignment_expression ---> conditional_expression
[Line No. 103] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 103] :: expression ---> assignment_expression
[Line No. 103] :: expression_opt ---> expression
[Line No. 103] :: expression_statement ---> expression_opt ;
[Line No. 103] :: statement ---> expression_statement
[Line No. 103] :: block_item ---> statement
[Line No. 103] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 104 getting parsed  --------------------

[Line No. 104] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 104] :: postfix_expression ---> primary_expression
[Line No. 104] :: unary_expression ---> postfix_expression
[Line No. 104] :: assignment_operator ---> &=
[Line No. 104] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 104] :: postfix_expression ---> primary_expression
[Line No. 104] :: unary_expression ---> postfix_expression
[Line No. 104] :: cast_expression ---> unary_expression
[Line No. 104] :: multiplicative_expression ---> cast_expression
[Line No. 104] :: additive_expression ---> multiplicative_expression
[Line No. 104] :: shift_expression ---> additive_expression
[Line No. 104] :: relational_expression ---> shift_expression
[Line No. 104] :: equality_expression ---> relational_expression
[Line No. 104] :: AND_expression ---> equality_expression
[Line No. 104] :: exclusive_OR_expression ---> AND_expression
[Line No. 104] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 104] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 104] :: logical_OR_expression ---> logical_AND_expression
[Line No. 104] :: conditional_expression ---> logical_OR_expression
[Line No. 104] :: assignment_expression ---> conditional_expression
[Line No. 104] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 104] :: expression ---> assignment_expression
[Line No. 104] :: expression_opt ---> expression
[Line No. 104] :: expression_statement ---> expression_opt ;
[Line No. 104] :: statement ---> expression_statement
[Line No. 104] :: block_item ---> statement
[Line No. 104] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 105 getting parsed  --------------------

[Line No. 105] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 105] :: postfix_expression ---> primary_expression
[Line No. 105] :: unary_expression ---> postfix_expression
[Line No. 105] :: assignment_operator ---> %=
[Line No. 105] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n7
[Line No. 105] :: postfix_expression ---> primary_expression
[Line No. 105] :: unary_expression ---> postfix_expression
[Line No. 105] :: cast_expression ---> unary_expression
[Line No. 105] :: multiplicative_expression ---> cast_expression
[Line No. 105] :: additive_expression ---> multiplicative_expression
[Line No. 105] :: shift_expression ---> additive_expression
[Line No. 105] :: relational_expression ---> shift_expression
[Line No. 105] :: equality_expression ---> relational_expression
[Line No. 105] :: AND_expression ---> equality_expression
[Line No. 105] :: exclusive_OR_expression ---> AND_expression
[Line No. 105] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 105] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 105] :: logical_OR_expression ---> logical_AND_expression
[Line No. 105] :: conditional_expression ---> logical_OR_expression
[Line No. 105] :: assignment_expression ---> conditional_expression
[Line No. 105] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 105] :: expression ---> assignment_expression
[Line No. 105] :: expression_opt ---> expression
[Line No. 105] :: expression_statement ---> expression_opt ;
[Line No. 105] :: statement ---> expression_statement
[Line No. 105] :: block_item ---> statement
[Line No. 105] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 106 getting parsed  --------------------

[Line No. 106] :: block_item_list_opt ---> block_item_list
[Line No. 106] :: compound_statement ---> { block_item_list_opt }
[Line No. 106] :: statement ---> compound_statement
[Line No. 106] :: iteration_statement ---> for ( declaration expression_opt ; expression_opt ) statement
[Line No. 106] :: statement ---> iteration_statement
[Line No. 106] :: block_item ---> statement
[Line No. 106] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 107 getting parsed  --------------------


-------------------- Line No. 108 getting parsed  --------------------

[Line No. 108] :: type_specifier ---> float
[Line No. 108] :: declaration_specifiers_opt ---> epsilon 
[Line No. 108] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 108] :: pointer_opt ---> epsilon
[Line No. 108] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = f3
[Line No. 108] :: declarator ---> pointer_opt direct_declarator
[Line No. 108] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 23.400000
[Line No. 108] :: postfix_expression ---> primary_expression
[Line No. 108] :: unary_expression ---> postfix_expression
[Line No. 108] :: cast_expression ---> unary_expression
[Line No. 108] :: multiplicative_expression ---> cast_expression
[Line No. 108] :: additive_expression ---> multiplicative_expression
[Line No. 108] :: shift_expression ---> additive_expression
[Line No. 108] :: relational_expression ---> shift_expression
[Line No. 108] :: equality_expression ---> relational_expression
[Line No. 108] :: AND_expression ---> equality_expression
[Line No. 108] :: exclusive_OR_expression ---> AND_expression
[Line No. 108] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 108] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 108] :: logical_OR_expression ---> logical_AND_expression
[Line No. 108] :: conditional_expression ---> logical_OR_expression
[Line No. 108] :: assignment_expression ---> conditional_expression
[Line No. 108] :: initialiser ---> assignment_expression
[Line No. 108] :: init_declarator ---> declarator = initialiser
[Line No. 108] :: init_declarator_list ---> init_declarator
[Line No. 108] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 108] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 108] :: block_item ---> declaration
[Line No. 108] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 109 getting parsed  --------------------

[Line No. 109] :: type_specifier ---> float
[Line No. 109] :: declaration_specifiers_opt ---> epsilon 
[Line No. 109] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 109] :: pointer_opt ---> epsilon
[Line No. 109] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = f4
[Line No. 109] :: declarator ---> pointer_opt direct_declarator
[Line No. 109] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 122.339996
[Line No. 109] :: postfix_expression ---> primary_expression
[Line No. 109] :: unary_expression ---> postfix_expression
[Line No. 109] :: cast_expression ---> unary_expression
[Line No. 109] :: multiplicative_expression ---> cast_expression
[Line No. 109] :: additive_expression ---> multiplicative_expression
[Line No. 109] :: shift_expression ---> additive_expression
[Line No. 109] :: relational_expression ---> shift_expression
[Line No. 109] :: equality_expression ---> relational_expression
[Line No. 109] :: AND_expression ---> equality_expression
[Line No. 109] :: exclusive_OR_expression ---> AND_expression
[Line No. 109] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 109] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 109] :: logical_OR_expression ---> logical_AND_expression
[Line No. 109] :: conditional_expression ---> logical_OR_expression
[Line No. 109] :: assignment_expression ---> conditional_expression
[Line No. 109] :: initialiser ---> assignment_expression
[Line No. 109] :: init_declarator ---> declarator = initialiser
[Line No. 109] :: init_declarator_list ---> init_declarator
[Line No. 109] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 109] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 109] :: block_item ---> declaration
[Line No. 109] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 110 getting parsed  --------------------

[Line No. 110] :: type_specifier ---> double
[Line No. 110] :: declaration_specifiers_opt ---> epsilon 
[Line No. 110] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 110] :: pointer_opt ---> epsilon
[Line No. 110] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = d2
[Line No. 110] :: declarator ---> pointer_opt direct_declarator
[Line No. 110] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 23400.000000
[Line No. 110] :: postfix_expression ---> primary_expression
[Line No. 110] :: unary_expression ---> postfix_expression
[Line No. 110] :: cast_expression ---> unary_expression
[Line No. 110] :: multiplicative_expression ---> cast_expression
[Line No. 110] :: additive_expression ---> multiplicative_expression
[Line No. 110] :: shift_expression ---> additive_expression
[Line No. 110] :: relational_expression ---> shift_expression
[Line No. 110] :: equality_expression ---> relational_expression
[Line No. 110] :: AND_expression ---> equality_expression
[Line No. 110] :: exclusive_OR_expression ---> AND_expression
[Line No. 110] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 110] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 110] :: logical_OR_expression ---> logical_AND_expression
[Line No. 110] :: conditional_expression ---> logical_OR_expression
[Line No. 110] :: assignment_expression ---> conditional_expression
[Line No. 110] :: initialiser ---> assignment_expression
[Line No. 110] :: init_declarator ---> declarator = initialiser
[Line No. 110] :: init_declarator_list ---> init_declarator
[Line No. 110] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 110] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 110] :: block_item ---> declaration
[Line No. 110] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 111 getting parsed  --------------------

[Line No. 111] :: type_specifier ---> double
[Line No. 111] :: declaration_specifiers_opt ---> epsilon 
[Line No. 111] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 111] :: pointer_opt ---> epsilon
[Line No. 111] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = d3
[Line No. 111] :: declarator ---> pointer_opt direct_declarator
[Line No. 111] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 0.000000
[Line No. 111] :: postfix_expression ---> primary_expression
[Line No. 111] :: unary_expression ---> postfix_expression
[Line No. 111] :: cast_expression ---> unary_expression
[Line No. 111] :: multiplicative_expression ---> cast_expression
[Line No. 111] :: additive_expression ---> multiplicative_expression
[Line No. 111] :: shift_expression ---> additive_expression
[Line No. 111] :: relational_expression ---> shift_expression
[Line No. 111] :: equality_expression ---> relational_expression
[Line No. 111] :: AND_expression ---> equality_expression
[Line No. 111] :: exclusive_OR_expression ---> AND_expression
[Line No. 111] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 111] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 111] :: logical_OR_expression ---> logical_AND_expression
[Line No. 111] :: conditional_expression ---> logical_OR_expression
[Line No. 111] :: assignment_expression ---> conditional_expression
[Line No. 111] :: initialiser ---> assignment_expression
[Line No. 111] :: init_declarator ---> declarator = initialiser
[Line No. 111] :: init_declarator_list ---> init_declarator
[Line No. 111] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 111] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 111] :: block_item ---> declaration
[Line No. 111] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 112 getting parsed  --------------------

[Line No. 112] :: type_qualifier ---> const
[Line No. 112] :: type_specifier ---> float
[Line No. 112] :: declaration_specifiers_opt ---> epsilon 
[Line No. 112] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 112] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 112] :: declaration_specifiers ---> type_qualifier declaration_specifiers_opt
[Line No. 112] :: pointer_opt ---> epsilon
[Line No. 112] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = f1
[Line No. 112] :: declarator ---> pointer_opt direct_declarator
[Line No. 112] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 0.234000
[Line No. 112] :: postfix_expression ---> primary_expression
[Line No. 112] :: unary_expression ---> postfix_expression
[Line No. 112] :: cast_expression ---> unary_expression
[Line No. 112] :: multiplicative_expression ---> cast_expression
[Line No. 112] :: additive_expression ---> multiplicative_expression
[Line No. 112] :: shift_expression ---> additive_expression
[Line No. 112] :: relational_expression ---> shift_expression
[Line No. 112] :: equality_expression ---> relational_expression
[Line No. 112] :: AND_expression ---> equality_expression
[Line No. 112] :: exclusive_OR_expression ---> AND_expression
[Line No. 112] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 112] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 112] :: logical_OR_expression ---> logical_AND_expression
[Line No. 112] :: conditional_expression ---> logical_OR_expression
[Line No. 112] :: assignment_expression ---> conditional_expression
[Line No. 112] :: initialiser ---> assignment_expression
[Line No. 112] :: init_declarator ---> declarator = initialiser
[Line No. 112] :: init_declarator_list ---> init_declarator
[Line No. 112] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 112] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 112] :: block_item ---> declaration
[Line No. 112] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 113 getting parsed  --------------------

[Line No. 113] :: type_specifier ---> float
[Line No. 113] :: declaration_specifiers_opt ---> epsilon 
[Line No. 113] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 113] :: pointer_opt ---> epsilon
[Line No. 113] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = f2
[Line No. 113] :: declarator ---> pointer_opt direct_declarator
[Line No. 113] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 0.002340
[Line No. 113] :: postfix_expression ---> primary_expression
[Line No. 113] :: unary_expression ---> postfix_expression
[Line No. 113] :: cast_expression ---> unary_expression
[Line No. 113] :: multiplicative_expression ---> cast_expression
[Line No. 113] :: additive_expression ---> multiplicative_expression
[Line No. 113] :: shift_expression ---> additive_expression
[Line No. 113] :: relational_expression ---> shift_expression
[Line No. 113] :: equality_expression ---> relational_expression
[Line No. 113] :: AND_expression ---> equality_expression
[Line No. 113] :: exclusive_OR_expression ---> AND_expression
[Line No. 113] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 113] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 113] :: logical_OR_expression ---> logical_AND_expression
[Line No. 113] :: conditional_expression ---> logical_OR_expression
[Line No. 113] :: assignment_expression ---> conditional_expression
[Line No. 113] :: initialiser ---> assignment_expression
[Line No. 113] :: init_declarator ---> declarator = initialiser
[Line No. 113] :: init_declarator_list ---> init_declarator
[Line No. 113] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 113] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 113] :: block_item ---> declaration
[Line No. 113] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 114 getting parsed  --------------------

[Line No. 114] :: type_specifier ---> char
[Line No. 114] :: declaration_specifiers_opt ---> epsilon 
[Line No. 114] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 114] :: pointer_opt ---> epsilon
[Line No. 114] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = s1
[Line No. 114] :: type_qualifier_list_opt ---> epsilon
[Line No. 114] :: assignment_expression_opt ---> epsilon
[Line No. 114] :: direct_declarator ---> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line No. 114] :: declarator ---> pointer_opt direct_declarator
[Line No. 114] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "A string // comments dont work here :P /* not even multiline ones */"
[Line No. 114] :: postfix_expression ---> primary_expression
[Line No. 114] :: unary_expression ---> postfix_expression
[Line No. 114] :: cast_expression ---> unary_expression
[Line No. 114] :: multiplicative_expression ---> cast_expression
[Line No. 114] :: additive_expression ---> multiplicative_expression
[Line No. 114] :: shift_expression ---> additive_expression
[Line No. 114] :: relational_expression ---> shift_expression
[Line No. 114] :: equality_expression ---> relational_expression
[Line No. 114] :: AND_expression ---> equality_expression
[Line No. 114] :: exclusive_OR_expression ---> AND_expression
[Line No. 114] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 114] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 114] :: logical_OR_expression ---> logical_AND_expression
[Line No. 114] :: conditional_expression ---> logical_OR_expression
[Line No. 114] :: assignment_expression ---> conditional_expression
[Line No. 114] :: initialiser ---> assignment_expression
[Line No. 114] :: init_declarator ---> declarator = initialiser
[Line No. 114] :: init_declarator_list ---> init_declarator
[Line No. 114] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 114] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 114] :: block_item ---> declaration
[Line No. 114] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 115 getting parsed  --------------------


-------------------- Line No. 116 getting parsed  --------------------


-------------------- Line No. 117 getting parsed  --------------------

[Line No. 117] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 117] :: postfix_expression ---> primary_expression
[Line No. 117] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "%f "
[Line No. 117] :: postfix_expression ---> primary_expression
[Line No. 117] :: unary_expression ---> postfix_expression
[Line No. 117] :: cast_expression ---> unary_expression
[Line No. 117] :: multiplicative_expression ---> cast_expression
[Line No. 117] :: additive_expression ---> multiplicative_expression
[Line No. 117] :: shift_expression ---> additive_expression
[Line No. 117] :: relational_expression ---> shift_expression
[Line No. 117] :: equality_expression ---> relational_expression
[Line No. 117] :: AND_expression ---> equality_expression
[Line No. 117] :: exclusive_OR_expression ---> AND_expression
[Line No. 117] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 117] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 117] :: logical_OR_expression ---> logical_AND_expression
[Line No. 117] :: conditional_expression ---> logical_OR_expression
[Line No. 117] :: assignment_expression ---> conditional_expression
[Line No. 117] :: argument_expression_list ---> assignment_expression
[Line No. 117] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f1
[Line No. 117] :: postfix_expression ---> primary_expression
[Line No. 117] :: unary_expression ---> postfix_expression
[Line No. 117] :: cast_expression ---> unary_expression
[Line No. 117] :: multiplicative_expression ---> cast_expression
[Line No. 117] :: additive_expression ---> multiplicative_expression
[Line No. 117] :: shift_expression ---> additive_expression
[Line No. 117] :: relational_expression ---> shift_expression
[Line No. 117] :: equality_expression ---> relational_expression
[Line No. 117] :: AND_expression ---> equality_expression
[Line No. 117] :: exclusive_OR_expression ---> AND_expression
[Line No. 117] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 117] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 117] :: logical_OR_expression ---> logical_AND_expression
[Line No. 117] :: conditional_expression ---> logical_OR_expression
[Line No. 117] :: assignment_expression ---> conditional_expression
[Line No. 117] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 117] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 117] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 117] :: unary_expression ---> postfix_expression
[Line No. 117] :: cast_expression ---> unary_expression
[Line No. 117] :: multiplicative_expression ---> cast_expression
[Line No. 117] :: additive_expression ---> multiplicative_expression
[Line No. 117] :: shift_expression ---> additive_expression
[Line No. 117] :: relational_expression ---> shift_expression
[Line No. 117] :: equality_expression ---> relational_expression
[Line No. 117] :: AND_expression ---> equality_expression
[Line No. 117] :: exclusive_OR_expression ---> AND_expression
[Line No. 117] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 117] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 117] :: logical_OR_expression ---> logical_AND_expression
[Line No. 117] :: conditional_expression ---> logical_OR_expression
[Line No. 117] :: assignment_expression ---> conditional_expression
[Line No. 117] :: expression ---> assignment_expression
[Line No. 117] :: expression_opt ---> expression
[Line No. 117] :: expression_statement ---> expression_opt ;
[Line No. 117] :: statement ---> expression_statement
[Line No. 117] :: block_item ---> statement
[Line No. 117] :: block_item_list ---> block_item

-------------------- Line No. 118 getting parsed  --------------------

[Line No. 118] :: block_item_list_opt ---> block_item_list
[Line No. 118] :: compound_statement ---> { block_item_list_opt }
[Line No. 118] :: statement ---> compound_statement
[Line No. 118] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f1
[Line No. 118] :: postfix_expression ---> primary_expression
[Line No. 118] :: unary_expression ---> postfix_expression
[Line No. 118] :: cast_expression ---> unary_expression
[Line No. 118] :: multiplicative_expression ---> cast_expression
[Line No. 118] :: additive_expression ---> multiplicative_expression
[Line No. 118] :: shift_expression ---> additive_expression
[Line No. 118] :: relational_expression ---> shift_expression
[Line No. 118] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f2
[Line No. 118] :: postfix_expression ---> primary_expression
[Line No. 118] :: unary_expression ---> postfix_expression
[Line No. 118] :: cast_expression ---> unary_expression
[Line No. 118] :: multiplicative_expression ---> cast_expression
[Line No. 118] :: additive_expression ---> multiplicative_expression
[Line No. 118] :: shift_expression ---> additive_expression
[Line No. 118] :: relational_expression ---> relational_expression < shift_expression
[Line No. 118] :: equality_expression ---> relational_expression
[Line No. 118] :: AND_expression ---> equality_expression
[Line No. 118] :: exclusive_OR_expression ---> AND_expression
[Line No. 118] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 118] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 118] :: logical_OR_expression ---> logical_AND_expression
[Line No. 118] :: conditional_expression ---> logical_OR_expression
[Line No. 118] :: assignment_expression ---> conditional_expression
[Line No. 118] :: expression ---> assignment_expression
[Line No. 118] :: iteration_statement ---> do statement while ( expression ) ;
[Line No. 118] :: statement ---> iteration_statement
[Line No. 118] :: block_item ---> statement
[Line No. 118] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 119 getting parsed  --------------------

[Line No. 119] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 119] :: postfix_expression ---> primary_expression
[Line No. 119] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "%f %f %f %f\n"
[Line No. 119] :: postfix_expression ---> primary_expression
[Line No. 119] :: unary_expression ---> postfix_expression
[Line No. 119] :: cast_expression ---> unary_expression
[Line No. 119] :: multiplicative_expression ---> cast_expression
[Line No. 119] :: additive_expression ---> multiplicative_expression
[Line No. 119] :: shift_expression ---> additive_expression
[Line No. 119] :: relational_expression ---> shift_expression
[Line No. 119] :: equality_expression ---> relational_expression
[Line No. 119] :: AND_expression ---> equality_expression
[Line No. 119] :: exclusive_OR_expression ---> AND_expression
[Line No. 119] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 119] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 119] :: logical_OR_expression ---> logical_AND_expression
[Line No. 119] :: conditional_expression ---> logical_OR_expression
[Line No. 119] :: assignment_expression ---> conditional_expression
[Line No. 119] :: argument_expression_list ---> assignment_expression
[Line No. 119] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f3
[Line No. 119] :: postfix_expression ---> primary_expression
[Line No. 119] :: unary_expression ---> postfix_expression
[Line No. 119] :: cast_expression ---> unary_expression
[Line No. 119] :: multiplicative_expression ---> cast_expression
[Line No. 119] :: additive_expression ---> multiplicative_expression
[Line No. 119] :: shift_expression ---> additive_expression
[Line No. 119] :: relational_expression ---> shift_expression
[Line No. 119] :: equality_expression ---> relational_expression
[Line No. 119] :: AND_expression ---> equality_expression
[Line No. 119] :: exclusive_OR_expression ---> AND_expression
[Line No. 119] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 119] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 119] :: logical_OR_expression ---> logical_AND_expression
[Line No. 119] :: conditional_expression ---> logical_OR_expression
[Line No. 119] :: assignment_expression ---> conditional_expression
[Line No. 119] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 119] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f4
[Line No. 119] :: postfix_expression ---> primary_expression
[Line No. 119] :: unary_expression ---> postfix_expression
[Line No. 119] :: cast_expression ---> unary_expression
[Line No. 119] :: multiplicative_expression ---> cast_expression
[Line No. 119] :: additive_expression ---> multiplicative_expression
[Line No. 119] :: shift_expression ---> additive_expression
[Line No. 119] :: relational_expression ---> shift_expression
[Line No. 119] :: equality_expression ---> relational_expression
[Line No. 119] :: AND_expression ---> equality_expression
[Line No. 119] :: exclusive_OR_expression ---> AND_expression
[Line No. 119] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 119] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 119] :: logical_OR_expression ---> logical_AND_expression
[Line No. 119] :: conditional_expression ---> logical_OR_expression
[Line No. 119] :: assignment_expression ---> conditional_expression
[Line No. 119] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 119] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = d2
[Line No. 119] :: postfix_expression ---> primary_expression
[Line No. 119] :: unary_expression ---> postfix_expression
[Line No. 119] :: cast_expression ---> unary_expression
[Line No. 119] :: multiplicative_expression ---> cast_expression
[Line No. 119] :: additive_expression ---> multiplicative_expression
[Line No. 119] :: shift_expression ---> additive_expression
[Line No. 119] :: relational_expression ---> shift_expression
[Line No. 119] :: equality_expression ---> relational_expression
[Line No. 119] :: AND_expression ---> equality_expression
[Line No. 119] :: exclusive_OR_expression ---> AND_expression
[Line No. 119] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 119] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 119] :: logical_OR_expression ---> logical_AND_expression
[Line No. 119] :: conditional_expression ---> logical_OR_expression
[Line No. 119] :: assignment_expression ---> conditional_expression
[Line No. 119] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 119] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = d3
[Line No. 119] :: postfix_expression ---> primary_expression
[Line No. 119] :: unary_expression ---> postfix_expression
[Line No. 119] :: cast_expression ---> unary_expression
[Line No. 119] :: multiplicative_expression ---> cast_expression
[Line No. 119] :: additive_expression ---> multiplicative_expression
[Line No. 119] :: shift_expression ---> additive_expression
[Line No. 119] :: relational_expression ---> shift_expression
[Line No. 119] :: equality_expression ---> relational_expression
[Line No. 119] :: AND_expression ---> equality_expression
[Line No. 119] :: exclusive_OR_expression ---> AND_expression
[Line No. 119] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 119] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 119] :: logical_OR_expression ---> logical_AND_expression
[Line No. 119] :: conditional_expression ---> logical_OR_expression
[Line No. 119] :: assignment_expression ---> conditional_expression
[Line No. 119] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 119] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 119] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 119] :: unary_expression ---> postfix_expression
[Line No. 119] :: cast_expression ---> unary_expression
[Line No. 119] :: multiplicative_expression ---> cast_expression
[Line No. 119] :: additive_expression ---> multiplicative_expression
[Line No. 119] :: shift_expression ---> additive_expression
[Line No. 119] :: relational_expression ---> shift_expression
[Line No. 119] :: equality_expression ---> relational_expression
[Line No. 119] :: AND_expression ---> equality_expression
[Line No. 119] :: exclusive_OR_expression ---> AND_expression
[Line No. 119] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 119] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 119] :: logical_OR_expression ---> logical_AND_expression
[Line No. 119] :: conditional_expression ---> logical_OR_expression
[Line No. 119] :: assignment_expression ---> conditional_expression
[Line No. 119] :: expression ---> assignment_expression
[Line No. 119] :: expression_opt ---> expression
[Line No. 119] :: expression_statement ---> expression_opt ;
[Line No. 119] :: statement ---> expression_statement
[Line No. 119] :: block_item ---> statement
[Line No. 119] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 120 getting parsed  --------------------

[Line No. 120] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = printf
[Line No. 120] :: postfix_expression ---> primary_expression
[Line No. 120] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "%s\n"
[Line No. 120] :: postfix_expression ---> primary_expression
[Line No. 120] :: unary_expression ---> postfix_expression
[Line No. 120] :: cast_expression ---> unary_expression
[Line No. 120] :: multiplicative_expression ---> cast_expression
[Line No. 120] :: additive_expression ---> multiplicative_expression
[Line No. 120] :: shift_expression ---> additive_expression
[Line No. 120] :: relational_expression ---> shift_expression
[Line No. 120] :: equality_expression ---> relational_expression
[Line No. 120] :: AND_expression ---> equality_expression
[Line No. 120] :: exclusive_OR_expression ---> AND_expression
[Line No. 120] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 120] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 120] :: logical_OR_expression ---> logical_AND_expression
[Line No. 120] :: conditional_expression ---> logical_OR_expression
[Line No. 120] :: assignment_expression ---> conditional_expression
[Line No. 120] :: argument_expression_list ---> assignment_expression
[Line No. 120] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s1
[Line No. 120] :: postfix_expression ---> primary_expression
[Line No. 120] :: unary_expression ---> postfix_expression
[Line No. 120] :: cast_expression ---> unary_expression
[Line No. 120] :: multiplicative_expression ---> cast_expression
[Line No. 120] :: additive_expression ---> multiplicative_expression
[Line No. 120] :: shift_expression ---> additive_expression
[Line No. 120] :: relational_expression ---> shift_expression
[Line No. 120] :: equality_expression ---> relational_expression
[Line No. 120] :: AND_expression ---> equality_expression
[Line No. 120] :: exclusive_OR_expression ---> AND_expression
[Line No. 120] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 120] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 120] :: logical_OR_expression ---> logical_AND_expression
[Line No. 120] :: conditional_expression ---> logical_OR_expression
[Line No. 120] :: assignment_expression ---> conditional_expression
[Line No. 120] :: argument_expression_list ---> argument_expression_list , assignment_expression
[Line No. 120] :: argument_expression_list_opt ---> argument_expression_list
[Line No. 120] :: postfix_expression ---> postfix_expression ( argument_expression_list_opt )
[Line No. 120] :: unary_expression ---> postfix_expression
[Line No. 120] :: cast_expression ---> unary_expression
[Line No. 120] :: multiplicative_expression ---> cast_expression
[Line No. 120] :: additive_expression ---> multiplicative_expression
[Line No. 120] :: shift_expression ---> additive_expression
[Line No. 120] :: relational_expression ---> shift_expression
[Line No. 120] :: equality_expression ---> relational_expression
[Line No. 120] :: AND_expression ---> equality_expression
[Line No. 120] :: exclusive_OR_expression ---> AND_expression
[Line No. 120] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 120] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 120] :: logical_OR_expression ---> logical_AND_expression
[Line No. 120] :: conditional_expression ---> logical_OR_expression
[Line No. 120] :: assignment_expression ---> conditional_expression
[Line No. 120] :: expression ---> assignment_expression
[Line No. 120] :: expression_opt ---> expression
[Line No. 120] :: expression_statement ---> expression_opt ;
[Line No. 120] :: statement ---> expression_statement
[Line No. 120] :: block_item ---> statement
[Line No. 120] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 121 getting parsed  --------------------

[Line No. 121] :: type_specifier ---> char
[Line No. 121] :: declaration_specifiers_opt ---> epsilon 
[Line No. 121] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 121] :: type_qualifier_list_opt ---> epsilon
[Line No. 121] :: pointer ---> * type_qualifier_list_opt
[Line No. 121] :: pointer_opt ---> pointer
[Line No. 121] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = s2
[Line No. 121] :: declarator ---> pointer_opt direct_declarator
[Line No. 121] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = "A string"
[Line No. 121] :: postfix_expression ---> primary_expression
[Line No. 121] :: unary_expression ---> postfix_expression
[Line No. 121] :: cast_expression ---> unary_expression
[Line No. 121] :: multiplicative_expression ---> cast_expression
[Line No. 121] :: additive_expression ---> multiplicative_expression
[Line No. 121] :: shift_expression ---> additive_expression
[Line No. 121] :: relational_expression ---> shift_expression
[Line No. 121] :: equality_expression ---> relational_expression
[Line No. 121] :: AND_expression ---> equality_expression
[Line No. 121] :: exclusive_OR_expression ---> AND_expression
[Line No. 121] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 121] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 121] :: logical_OR_expression ---> logical_AND_expression
[Line No. 121] :: conditional_expression ---> logical_OR_expression
[Line No. 121] :: assignment_expression ---> conditional_expression
[Line No. 121] :: initialiser ---> assignment_expression
[Line No. 121] :: init_declarator ---> declarator = initialiser
[Line No. 121] :: init_declarator_list ---> init_declarator
[Line No. 121] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 121] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 121] :: block_item ---> declaration
[Line No. 121] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 122 getting parsed  --------------------

[Line No. 122] :: type_specifier ---> char
[Line No. 122] :: declaration_specifiers_opt ---> epsilon 
[Line No. 122] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 122] :: pointer_opt ---> epsilon
[Line No. 122] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = s2
[Line No. 122] :: type_qualifier_list_opt ---> epsilon
[Line No. 122] :: assignment_expression_opt ---> epsilon
[Line No. 122] :: direct_declarator ---> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
[Line No. 122] :: declarator ---> pointer_opt direct_declarator
[Line No. 122] :: primary_expression ---> STRING_LITERAL
				STRING_LITERAL = ""
[Line No. 122] :: postfix_expression ---> primary_expression
[Line No. 122] :: unary_expression ---> postfix_expression
[Line No. 122] :: cast_expression ---> unary_expression
[Line No. 122] :: multiplicative_expression ---> cast_expression
[Line No. 122] :: additive_expression ---> multiplicative_expression
[Line No. 122] :: shift_expression ---> additive_expression
[Line No. 122] :: relational_expression ---> shift_expression
[Line No. 122] :: equality_expression ---> relational_expression
[Line No. 122] :: AND_expression ---> equality_expression
[Line No. 122] :: exclusive_OR_expression ---> AND_expression
[Line No. 122] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 122] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 122] :: logical_OR_expression ---> logical_AND_expression
[Line No. 122] :: conditional_expression ---> logical_OR_expression
[Line No. 122] :: assignment_expression ---> conditional_expression
[Line No. 122] :: initialiser ---> assignment_expression
[Line No. 122] :: init_declarator ---> declarator = initialiser
[Line No. 122] :: init_declarator_list ---> init_declarator
[Line No. 122] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 122] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 122] :: block_item ---> declaration
[Line No. 122] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 123 getting parsed  --------------------

[Line No. 123] :: type_specifier ---> int
[Line No. 123] :: declaration_specifiers_opt ---> epsilon 
[Line No. 123] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 123] :: pointer_opt ---> epsilon
[Line No. 123] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 123] :: declarator ---> pointer_opt direct_declarator
[Line No. 123] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 123] :: postfix_expression ---> primary_expression
[Line No. 123] :: unary_expression ---> postfix_expression
[Line No. 123] :: cast_expression ---> unary_expression
[Line No. 123] :: multiplicative_expression ---> cast_expression
[Line No. 123] :: additive_expression ---> multiplicative_expression
[Line No. 123] :: shift_expression ---> additive_expression
[Line No. 123] :: relational_expression ---> shift_expression
[Line No. 123] :: equality_expression ---> relational_expression
[Line No. 123] :: AND_expression ---> equality_expression
[Line No. 123] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 123] :: postfix_expression ---> primary_expression
[Line No. 123] :: unary_expression ---> postfix_expression
[Line No. 123] :: cast_expression ---> unary_expression
[Line No. 123] :: multiplicative_expression ---> cast_expression
[Line No. 123] :: additive_expression ---> multiplicative_expression
[Line No. 123] :: shift_expression ---> additive_expression
[Line No. 123] :: relational_expression ---> shift_expression
[Line No. 123] :: equality_expression ---> relational_expression
[Line No. 123] :: AND_expression ---> AND_expression & equality_expression
[Line No. 123] :: exclusive_OR_expression ---> AND_expression
[Line No. 123] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 123] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 123] :: logical_OR_expression ---> logical_AND_expression
[Line No. 123] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 123] :: postfix_expression ---> primary_expression
[Line No. 123] :: unary_expression ---> postfix_expression
[Line No. 123] :: cast_expression ---> unary_expression
[Line No. 123] :: multiplicative_expression ---> cast_expression
[Line No. 123] :: additive_expression ---> multiplicative_expression
[Line No. 123] :: shift_expression ---> additive_expression
[Line No. 123] :: relational_expression ---> shift_expression
[Line No. 123] :: equality_expression ---> relational_expression
[Line No. 123] :: AND_expression ---> equality_expression
[Line No. 123] :: exclusive_OR_expression ---> AND_expression
[Line No. 123] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 123] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 123] :: logical_OR_expression ---> logical_AND_expression
[Line No. 123] :: conditional_expression ---> logical_OR_expression
[Line No. 123] :: assignment_expression ---> conditional_expression
[Line No. 123] :: expression ---> assignment_expression
[Line No. 123] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 123] :: postfix_expression ---> primary_expression
[Line No. 123] :: unary_expression ---> postfix_expression
[Line No. 123] :: cast_expression ---> unary_expression
[Line No. 123] :: multiplicative_expression ---> cast_expression
[Line No. 123] :: additive_expression ---> multiplicative_expression
[Line No. 123] :: shift_expression ---> additive_expression
[Line No. 123] :: relational_expression ---> shift_expression
[Line No. 123] :: equality_expression ---> relational_expression
[Line No. 123] :: AND_expression ---> equality_expression
[Line No. 123] :: exclusive_OR_expression ---> AND_expression
[Line No. 123] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 123] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 123] :: logical_OR_expression ---> logical_AND_expression
[Line No. 123] :: conditional_expression ---> logical_OR_expression
[Line No. 123] :: conditional_expression ---> logical_OR_expression ? expression : conditional_expression
[Line No. 123] :: assignment_expression ---> conditional_expression
[Line No. 123] :: initialiser ---> assignment_expression
[Line No. 123] :: init_declarator ---> declarator = initialiser
[Line No. 123] :: init_declarator_list ---> init_declarator
[Line No. 123] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 123] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 123] :: block_item ---> declaration
[Line No. 123] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 124 getting parsed  --------------------

[Line No. 124] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 124] :: postfix_expression ---> primary_expression
[Line No. 124] :: postfix_expression ---> postfix_expression --
[Line No. 124] :: unary_expression ---> postfix_expression
[Line No. 124] :: cast_expression ---> unary_expression
[Line No. 124] :: multiplicative_expression ---> cast_expression
[Line No. 124] :: additive_expression ---> multiplicative_expression
[Line No. 124] :: shift_expression ---> additive_expression
[Line No. 124] :: relational_expression ---> shift_expression
[Line No. 124] :: equality_expression ---> relational_expression
[Line No. 124] :: AND_expression ---> equality_expression
[Line No. 124] :: exclusive_OR_expression ---> AND_expression
[Line No. 124] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 124] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 124] :: logical_OR_expression ---> logical_AND_expression
[Line No. 124] :: conditional_expression ---> logical_OR_expression
[Line No. 124] :: assignment_expression ---> conditional_expression
[Line No. 124] :: expression ---> assignment_expression
[Line No. 124] :: expression_opt ---> expression
[Line No. 124] :: expression_statement ---> expression_opt ;
[Line No. 124] :: statement ---> expression_statement
[Line No. 124] :: block_item ---> statement
[Line No. 124] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 125 getting parsed  --------------------

[Line No. 125] :: type_specifier ---> unsigned
[Line No. 125] :: type_specifier ---> long
[Line No. 125] :: declaration_specifiers_opt ---> epsilon 
[Line No. 125] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 125] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 125] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 125] :: pointer_opt ---> epsilon
[Line No. 125] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = l
[Line No. 125] :: declarator ---> pointer_opt direct_declarator
[Line No. 125] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 17409235
[Line No. 125] :: postfix_expression ---> primary_expression
[Line No. 125] :: unary_expression ---> postfix_expression
[Line No. 125] :: cast_expression ---> unary_expression
[Line No. 125] :: multiplicative_expression ---> cast_expression
[Line No. 125] :: additive_expression ---> multiplicative_expression
[Line No. 125] :: shift_expression ---> additive_expression
[Line No. 125] :: relational_expression ---> shift_expression
[Line No. 125] :: equality_expression ---> relational_expression
[Line No. 125] :: AND_expression ---> equality_expression
[Line No. 125] :: exclusive_OR_expression ---> AND_expression
[Line No. 125] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 125] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 125] :: logical_OR_expression ---> logical_AND_expression
[Line No. 125] :: conditional_expression ---> logical_OR_expression
[Line No. 125] :: assignment_expression ---> conditional_expression
[Line No. 125] :: initialiser ---> assignment_expression
[Line No. 125] :: init_declarator ---> declarator = initialiser
[Line No. 125] :: init_declarator_list ---> init_declarator
[Line No. 125] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 125] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 125] :: block_item ---> declaration
[Line No. 125] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 126 getting parsed  --------------------

[Line No. 126] :: type_specifier ---> signed
[Line No. 126] :: type_specifier ---> short
[Line No. 126] :: declaration_specifiers_opt ---> epsilon 
[Line No. 126] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 126] :: declaration_specifiers_opt ---> declaration_specifiers
[Line No. 126] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 126] :: pointer_opt ---> epsilon
[Line No. 126] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 126] :: declarator ---> pointer_opt direct_declarator
[Line No. 126] :: unary_operator ---> -
[Line No. 126] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 12
[Line No. 126] :: postfix_expression ---> primary_expression
[Line No. 126] :: unary_expression ---> postfix_expression
[Line No. 126] :: cast_expression ---> unary_expression
[Line No. 126] :: unary_expression ---> unary_operator cast_expression
[Line No. 126] :: cast_expression ---> unary_expression
[Line No. 126] :: multiplicative_expression ---> cast_expression
[Line No. 126] :: additive_expression ---> multiplicative_expression
[Line No. 126] :: shift_expression ---> additive_expression
[Line No. 126] :: relational_expression ---> shift_expression
[Line No. 126] :: equality_expression ---> relational_expression
[Line No. 126] :: AND_expression ---> equality_expression
[Line No. 126] :: exclusive_OR_expression ---> AND_expression
[Line No. 126] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 126] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 126] :: logical_OR_expression ---> logical_AND_expression
[Line No. 126] :: conditional_expression ---> logical_OR_expression
[Line No. 126] :: assignment_expression ---> conditional_expression
[Line No. 126] :: initialiser ---> assignment_expression
[Line No. 126] :: init_declarator ---> declarator = initialiser
[Line No. 126] :: init_declarator_list ---> init_declarator
[Line No. 126] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 126] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 126] :: block_item ---> declaration
[Line No. 126] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 127 getting parsed  --------------------

[Line No. 127] :: type_specifier ---> char
[Line No. 127] :: declaration_specifiers_opt ---> epsilon 
[Line No. 127] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 127] :: pointer_opt ---> epsilon
[Line No. 127] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = c
[Line No. 127] :: declarator ---> pointer_opt direct_declarator
[Line No. 127] :: primary_expression ---> CHARACTER_CONSTANT
				CHARACTER_CONSTANT = '\?'
[Line No. 127] :: postfix_expression ---> primary_expression
[Line No. 127] :: unary_expression ---> postfix_expression
[Line No. 127] :: cast_expression ---> unary_expression
[Line No. 127] :: multiplicative_expression ---> cast_expression
[Line No. 127] :: additive_expression ---> multiplicative_expression
[Line No. 127] :: shift_expression ---> additive_expression
[Line No. 127] :: relational_expression ---> shift_expression
[Line No. 127] :: equality_expression ---> relational_expression
[Line No. 127] :: AND_expression ---> equality_expression
[Line No. 127] :: exclusive_OR_expression ---> AND_expression
[Line No. 127] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 127] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 127] :: logical_OR_expression ---> logical_AND_expression
[Line No. 127] :: conditional_expression ---> logical_OR_expression
[Line No. 127] :: assignment_expression ---> conditional_expression
[Line No. 127] :: initialiser ---> assignment_expression
[Line No. 127] :: init_declarator ---> declarator = initialiser
[Line No. 127] :: init_declarator_list ---> init_declarator
[Line No. 127] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 127] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 127] :: block_item ---> declaration
[Line No. 127] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 128 getting parsed  --------------------

[Line No. 128] :: type_specifier ---> double
[Line No. 128] :: declaration_specifiers_opt ---> epsilon 
[Line No. 128] :: declaration_specifiers ---> type_specifier declaration_specifiers_opt
[Line No. 128] :: pointer_opt ---> epsilon
[Line No. 128] :: direct_declarator ---> IDENTIFIER
				IDENTIFIER = d1
[Line No. 128] :: declarator ---> pointer_opt direct_declarator
[Line No. 128] :: primary_expression ---> FLOATING_CONSTANT
				FLOATING_CONSTANT = 234.000000
[Line No. 128] :: postfix_expression ---> primary_expression
[Line No. 128] :: unary_expression ---> postfix_expression
[Line No. 128] :: cast_expression ---> unary_expression
[Line No. 128] :: multiplicative_expression ---> cast_expression
[Line No. 128] :: additive_expression ---> multiplicative_expression
[Line No. 128] :: shift_expression ---> additive_expression
[Line No. 128] :: relational_expression ---> shift_expression
[Line No. 128] :: equality_expression ---> relational_expression
[Line No. 128] :: AND_expression ---> equality_expression
[Line No. 128] :: exclusive_OR_expression ---> AND_expression
[Line No. 128] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 128] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 128] :: logical_OR_expression ---> logical_AND_expression
[Line No. 128] :: conditional_expression ---> logical_OR_expression
[Line No. 128] :: assignment_expression ---> conditional_expression
[Line No. 128] :: initialiser ---> assignment_expression
[Line No. 128] :: init_declarator ---> declarator = initialiser
[Line No. 128] :: init_declarator_list ---> init_declarator
[Line No. 128] :: init_declarator_list_opt ---> init_declarator_list
[Line No. 128] :: declaration ---> declaration_specifiers init_declarator_list_opt ;
[Line No. 128] :: block_item ---> declaration
[Line No. 128] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 129 getting parsed  --------------------


-------------------- Line No. 130 getting parsed  --------------------

[Line No. 130] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = d1
[Line No. 130] :: postfix_expression ---> primary_expression
[Line No. 130] :: unary_expression ---> postfix_expression
[Line No. 130] :: cast_expression ---> unary_expression
[Line No. 130] :: multiplicative_expression ---> cast_expression
[Line No. 130] :: additive_expression ---> multiplicative_expression
[Line No. 130] :: shift_expression ---> additive_expression
[Line No. 130] :: relational_expression ---> shift_expression
[Line No. 130] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f1
[Line No. 130] :: postfix_expression ---> primary_expression
[Line No. 130] :: unary_expression ---> postfix_expression
[Line No. 130] :: cast_expression ---> unary_expression
[Line No. 130] :: multiplicative_expression ---> cast_expression
[Line No. 130] :: additive_expression ---> multiplicative_expression
[Line No. 130] :: shift_expression ---> additive_expression
[Line No. 130] :: relational_expression ---> relational_expression > shift_expression
[Line No. 130] :: equality_expression ---> relational_expression
[Line No. 130] :: AND_expression ---> equality_expression
[Line No. 130] :: exclusive_OR_expression ---> AND_expression
[Line No. 130] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 130] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 130] :: logical_OR_expression ---> logical_AND_expression
[Line No. 130] :: conditional_expression ---> logical_OR_expression
[Line No. 130] :: assignment_expression ---> conditional_expression
[Line No. 130] :: expression ---> assignment_expression

-------------------- Line No. 131 getting parsed  --------------------


-------------------- Line No. 132 getting parsed  --------------------

[Line No. 132] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 132] :: postfix_expression ---> primary_expression
[Line No. 132] :: unary_expression ---> postfix_expression
[Line No. 132] :: cast_expression ---> unary_expression
[Line No. 132] :: multiplicative_expression ---> cast_expression
[Line No. 132] :: additive_expression ---> multiplicative_expression
[Line No. 132] :: shift_expression ---> additive_expression
[Line No. 132] :: relational_expression ---> shift_expression
[Line No. 132] :: equality_expression ---> relational_expression
[Line No. 132] :: AND_expression ---> equality_expression
[Line No. 132] :: exclusive_OR_expression ---> AND_expression
[Line No. 132] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 132] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 132] :: logical_OR_expression ---> logical_AND_expression
[Line No. 132] :: conditional_expression ---> logical_OR_expression
[Line No. 132] :: constant_expression ---> conditional_expression

-------------------- Line No. 133 getting parsed  --------------------

[Line No. 133] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f2
[Line No. 133] :: postfix_expression ---> primary_expression
[Line No. 133] :: unary_expression ---> postfix_expression
[Line No. 133] :: assignment_operator ---> /=
[Line No. 133] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = f3
[Line No. 133] :: postfix_expression ---> primary_expression
[Line No. 133] :: unary_expression ---> postfix_expression
[Line No. 133] :: cast_expression ---> unary_expression
[Line No. 133] :: multiplicative_expression ---> cast_expression
[Line No. 133] :: additive_expression ---> multiplicative_expression
[Line No. 133] :: shift_expression ---> additive_expression
[Line No. 133] :: relational_expression ---> shift_expression
[Line No. 133] :: equality_expression ---> relational_expression
[Line No. 133] :: AND_expression ---> equality_expression
[Line No. 133] :: exclusive_OR_expression ---> AND_expression
[Line No. 133] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 133] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 133] :: logical_OR_expression ---> logical_AND_expression
[Line No. 133] :: conditional_expression ---> logical_OR_expression
[Line No. 133] :: assignment_expression ---> conditional_expression
[Line No. 133] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 133] :: expression ---> assignment_expression
[Line No. 133] :: expression_opt ---> expression
[Line No. 133] :: expression_statement ---> expression_opt ;
[Line No. 133] :: statement ---> expression_statement
[Line No. 133] :: labeled_statement ---> case constant_expression : statement
[Line No. 133] :: statement ---> labeled_statement
[Line No. 133] :: block_item ---> statement
[Line No. 133] :: block_item_list ---> block_item

-------------------- Line No. 134 getting parsed  --------------------

[Line No. 134] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 134] :: postfix_expression ---> primary_expression
[Line No. 134] :: unary_expression ---> postfix_expression
[Line No. 134] :: assignment_operator ---> =
[Line No. 134] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 134] :: postfix_expression ---> primary_expression
[Line No. 134] :: unary_expression ---> postfix_expression
[Line No. 134] :: cast_expression ---> unary_expression
[Line No. 134] :: multiplicative_expression ---> cast_expression
[Line No. 134] :: additive_expression ---> multiplicative_expression
[Line No. 134] :: shift_expression ---> additive_expression
[Line No. 134] :: relational_expression ---> shift_expression
[Line No. 134] :: equality_expression ---> relational_expression
[Line No. 134] :: AND_expression ---> equality_expression
[Line No. 134] :: exclusive_OR_expression ---> AND_expression
[Line No. 134] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 134] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 134] :: postfix_expression ---> primary_expression
[Line No. 134] :: unary_expression ---> postfix_expression
[Line No. 134] :: cast_expression ---> unary_expression
[Line No. 134] :: multiplicative_expression ---> cast_expression
[Line No. 134] :: additive_expression ---> multiplicative_expression
[Line No. 134] :: shift_expression ---> additive_expression
[Line No. 134] :: relational_expression ---> shift_expression
[Line No. 134] :: equality_expression ---> relational_expression
[Line No. 134] :: AND_expression ---> equality_expression
[Line No. 134] :: exclusive_OR_expression ---> AND_expression
[Line No. 134] :: inclusive_OR_expression ---> inclusive_OR_expression | exclusive_OR_expression
[Line No. 134] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 134] :: logical_OR_expression ---> logical_AND_expression
[Line No. 134] :: conditional_expression ---> logical_OR_expression
[Line No. 134] :: assignment_expression ---> conditional_expression
[Line No. 134] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 134] :: expression ---> assignment_expression
[Line No. 134] :: expression_opt ---> expression
[Line No. 134] :: expression_statement ---> expression_opt ;
[Line No. 134] :: statement ---> expression_statement
[Line No. 134] :: block_item ---> statement
[Line No. 134] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 135 getting parsed  --------------------

[Line No. 135] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 135] :: postfix_expression ---> primary_expression
[Line No. 135] :: unary_expression ---> postfix_expression
[Line No. 135] :: assignment_operator ---> =
[Line No. 135] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 135] :: postfix_expression ---> primary_expression
[Line No. 135] :: unary_expression ---> postfix_expression
[Line No. 135] :: cast_expression ---> unary_expression
[Line No. 135] :: multiplicative_expression ---> cast_expression
[Line No. 135] :: additive_expression ---> multiplicative_expression
[Line No. 135] :: shift_expression ---> additive_expression
[Line No. 135] :: relational_expression ---> shift_expression
[Line No. 135] :: equality_expression ---> relational_expression
[Line No. 135] :: AND_expression ---> equality_expression
[Line No. 135] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 135] :: postfix_expression ---> primary_expression
[Line No. 135] :: unary_expression ---> postfix_expression
[Line No. 135] :: cast_expression ---> unary_expression
[Line No. 135] :: multiplicative_expression ---> cast_expression
[Line No. 135] :: additive_expression ---> multiplicative_expression
[Line No. 135] :: shift_expression ---> additive_expression
[Line No. 135] :: relational_expression ---> shift_expression
[Line No. 135] :: equality_expression ---> relational_expression
[Line No. 135] :: AND_expression ---> AND_expression & equality_expression
[Line No. 135] :: exclusive_OR_expression ---> AND_expression
[Line No. 135] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 135] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 135] :: logical_OR_expression ---> logical_AND_expression
[Line No. 135] :: conditional_expression ---> logical_OR_expression
[Line No. 135] :: assignment_expression ---> conditional_expression
[Line No. 135] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 135] :: expression ---> assignment_expression
[Line No. 135] :: expression_opt ---> expression
[Line No. 135] :: expression_statement ---> expression_opt ;
[Line No. 135] :: statement ---> expression_statement
[Line No. 135] :: block_item ---> statement
[Line No. 135] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 136 getting parsed  --------------------

[Line No. 136] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 136] :: postfix_expression ---> primary_expression
[Line No. 136] :: unary_expression ---> postfix_expression
[Line No. 136] :: assignment_operator ---> =
[Line No. 136] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 136] :: postfix_expression ---> primary_expression
[Line No. 136] :: unary_expression ---> postfix_expression
[Line No. 136] :: cast_expression ---> unary_expression
[Line No. 136] :: multiplicative_expression ---> cast_expression
[Line No. 136] :: additive_expression ---> multiplicative_expression
[Line No. 136] :: shift_expression ---> additive_expression
[Line No. 136] :: relational_expression ---> shift_expression
[Line No. 136] :: equality_expression ---> relational_expression
[Line No. 136] :: AND_expression ---> equality_expression
[Line No. 136] :: exclusive_OR_expression ---> AND_expression
[Line No. 136] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 136] :: postfix_expression ---> primary_expression
[Line No. 136] :: unary_expression ---> postfix_expression
[Line No. 136] :: cast_expression ---> unary_expression
[Line No. 136] :: multiplicative_expression ---> cast_expression
[Line No. 136] :: additive_expression ---> multiplicative_expression
[Line No. 136] :: shift_expression ---> additive_expression
[Line No. 136] :: relational_expression ---> shift_expression
[Line No. 136] :: equality_expression ---> relational_expression
[Line No. 136] :: AND_expression ---> equality_expression
[Line No. 136] :: exclusive_OR_expression ---> exclusive_OR_expression ^ AND_expression
[Line No. 136] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 136] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 136] :: logical_OR_expression ---> logical_AND_expression
[Line No. 136] :: conditional_expression ---> logical_OR_expression
[Line No. 136] :: assignment_expression ---> conditional_expression
[Line No. 136] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 136] :: expression ---> assignment_expression
[Line No. 136] :: expression_opt ---> expression
[Line No. 136] :: expression_statement ---> expression_opt ;
[Line No. 136] :: statement ---> expression_statement
[Line No. 136] :: block_item ---> statement
[Line No. 136] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 137 getting parsed  --------------------

[Line No. 137] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 137] :: postfix_expression ---> primary_expression
[Line No. 137] :: unary_expression ---> postfix_expression
[Line No. 137] :: assignment_operator ---> =
[Line No. 137] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 137] :: postfix_expression ---> primary_expression
[Line No. 137] :: unary_expression ---> postfix_expression
[Line No. 137] :: cast_expression ---> unary_expression
[Line No. 137] :: multiplicative_expression ---> cast_expression
[Line No. 137] :: additive_expression ---> multiplicative_expression
[Line No. 137] :: shift_expression ---> additive_expression
[Line No. 137] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 137] :: postfix_expression ---> primary_expression
[Line No. 137] :: unary_expression ---> postfix_expression
[Line No. 137] :: cast_expression ---> unary_expression
[Line No. 137] :: multiplicative_expression ---> cast_expression
[Line No. 137] :: additive_expression ---> multiplicative_expression
[Line No. 137] :: shift_expression ---> shift_expression >> additive_expression
[Line No. 137] :: relational_expression ---> shift_expression
[Line No. 137] :: equality_expression ---> relational_expression
[Line No. 137] :: AND_expression ---> equality_expression
[Line No. 137] :: exclusive_OR_expression ---> AND_expression
[Line No. 137] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 137] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 137] :: logical_OR_expression ---> logical_AND_expression
[Line No. 137] :: conditional_expression ---> logical_OR_expression
[Line No. 137] :: assignment_expression ---> conditional_expression
[Line No. 137] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 137] :: expression ---> assignment_expression
[Line No. 137] :: expression_opt ---> expression
[Line No. 137] :: expression_statement ---> expression_opt ;
[Line No. 137] :: statement ---> expression_statement
[Line No. 137] :: block_item ---> statement
[Line No. 137] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 138 getting parsed  --------------------

[Line No. 138] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 138] :: postfix_expression ---> primary_expression
[Line No. 138] :: unary_expression ---> postfix_expression
[Line No. 138] :: assignment_operator ---> =
[Line No. 138] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n1
[Line No. 138] :: postfix_expression ---> primary_expression
[Line No. 138] :: unary_expression ---> postfix_expression
[Line No. 138] :: cast_expression ---> unary_expression
[Line No. 138] :: multiplicative_expression ---> cast_expression
[Line No. 138] :: additive_expression ---> multiplicative_expression
[Line No. 138] :: shift_expression ---> additive_expression
[Line No. 138] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
[Line No. 138] :: postfix_expression ---> primary_expression
[Line No. 138] :: unary_expression ---> postfix_expression
[Line No. 138] :: cast_expression ---> unary_expression
[Line No. 138] :: multiplicative_expression ---> cast_expression
[Line No. 138] :: additive_expression ---> multiplicative_expression
[Line No. 138] :: shift_expression ---> shift_expression << additive_expression
[Line No. 138] :: relational_expression ---> shift_expression
[Line No. 138] :: equality_expression ---> relational_expression
[Line No. 138] :: AND_expression ---> equality_expression
[Line No. 138] :: exclusive_OR_expression ---> AND_expression
[Line No. 138] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 138] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 138] :: logical_OR_expression ---> logical_AND_expression
[Line No. 138] :: conditional_expression ---> logical_OR_expression
[Line No. 138] :: assignment_expression ---> conditional_expression
[Line No. 138] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 138] :: expression ---> assignment_expression
[Line No. 138] :: expression_opt ---> expression
[Line No. 138] :: expression_statement ---> expression_opt ;
[Line No. 138] :: statement ---> expression_statement
[Line No. 138] :: block_item ---> statement
[Line No. 138] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 139 getting parsed  --------------------

[Line No. 139] :: jump_statement ---> break ;
[Line No. 139] :: statement ---> jump_statement
[Line No. 139] :: block_item ---> statement
[Line No. 139] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 140 getting parsed  --------------------


-------------------- Line No. 141 getting parsed  --------------------

[Line No. 141] :: jump_statement ---> break ;
[Line No. 141] :: statement ---> jump_statement
[Line No. 141] :: labeled_statement ---> default : statement
[Line No. 141] :: statement ---> labeled_statement
[Line No. 141] :: block_item ---> statement
[Line No. 141] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 142 getting parsed  --------------------

[Line No. 142] :: block_item_list_opt ---> block_item_list
[Line No. 142] :: compound_statement ---> { block_item_list_opt }
[Line No. 142] :: statement ---> compound_statement
[Line No. 142] :: selection_statement ---> switch ( expression ) statement
[Line No. 142] :: statement ---> selection_statement
[Line No. 142] :: block_item ---> statement
[Line No. 142] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 143 getting parsed  --------------------


-------------------- Line No. 144 getting parsed  --------------------


-------------------- Line No. 145 getting parsed  --------------------


-------------------- Line No. 146 getting parsed  --------------------

[Line No. 146] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 146] :: postfix_expression ---> primary_expression
[Line No. 146] :: unary_expression ---> postfix_expression
[Line No. 146] :: cast_expression ---> unary_expression
[Line No. 146] :: multiplicative_expression ---> cast_expression
[Line No. 146] :: additive_expression ---> multiplicative_expression
[Line No. 146] :: shift_expression ---> additive_expression
[Line No. 146] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 146] :: postfix_expression ---> primary_expression
[Line No. 146] :: unary_expression ---> postfix_expression
[Line No. 146] :: cast_expression ---> unary_expression
[Line No. 146] :: multiplicative_expression ---> cast_expression
[Line No. 146] :: additive_expression ---> multiplicative_expression
[Line No. 146] :: shift_expression ---> shift_expression >> additive_expression
[Line No. 146] :: relational_expression ---> shift_expression
[Line No. 146] :: equality_expression ---> relational_expression
[Line No. 146] :: AND_expression ---> equality_expression
[Line No. 146] :: exclusive_OR_expression ---> AND_expression
[Line No. 146] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 146] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 146] :: logical_OR_expression ---> logical_AND_expression
[Line No. 146] :: conditional_expression ---> logical_OR_expression
[Line No. 146] :: assignment_expression ---> conditional_expression
[Line No. 146] :: expression ---> assignment_expression
[Line No. 146] :: expression_opt ---> expression
[Line No. 146] :: expression_statement ---> expression_opt ;
[Line No. 146] :: statement ---> expression_statement
[Line No. 146] :: block_item ---> statement
[Line No. 146] :: block_item_list ---> block_item

-------------------- Line No. 147 getting parsed  --------------------

[Line No. 147] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 147] :: postfix_expression ---> primary_expression
[Line No. 147] :: unary_expression ---> postfix_expression
[Line No. 147] :: assignment_operator ---> =
[Line No. 147] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 147] :: postfix_expression ---> primary_expression
[Line No. 147] :: unary_expression ---> postfix_expression
[Line No. 147] :: cast_expression ---> unary_expression
[Line No. 147] :: multiplicative_expression ---> cast_expression
[Line No. 147] :: additive_expression ---> multiplicative_expression
[Line No. 147] :: shift_expression ---> additive_expression
[Line No. 147] :: relational_expression ---> shift_expression
[Line No. 147] :: equality_expression ---> relational_expression
[Line No. 147] :: AND_expression ---> equality_expression
[Line No. 147] :: exclusive_OR_expression ---> AND_expression
[Line No. 147] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 147] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 147] :: postfix_expression ---> primary_expression
[Line No. 147] :: unary_expression ---> postfix_expression
[Line No. 147] :: cast_expression ---> unary_expression
[Line No. 147] :: multiplicative_expression ---> cast_expression
[Line No. 147] :: additive_expression ---> multiplicative_expression
[Line No. 147] :: shift_expression ---> additive_expression
[Line No. 147] :: relational_expression ---> shift_expression
[Line No. 147] :: equality_expression ---> relational_expression
[Line No. 147] :: AND_expression ---> equality_expression
[Line No. 147] :: exclusive_OR_expression ---> AND_expression
[Line No. 147] :: inclusive_OR_expression ---> inclusive_OR_expression | exclusive_OR_expression
[Line No. 147] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 147] :: logical_OR_expression ---> logical_AND_expression
[Line No. 147] :: conditional_expression ---> logical_OR_expression
[Line No. 147] :: assignment_expression ---> conditional_expression
[Line No. 147] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 147] :: expression ---> assignment_expression
[Line No. 147] :: expression_opt ---> expression
[Line No. 147] :: expression_statement ---> expression_opt ;
[Line No. 147] :: statement ---> expression_statement
[Line No. 147] :: block_item ---> statement
[Line No. 147] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 148 getting parsed  --------------------

[Line No. 148] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 148] :: postfix_expression ---> primary_expression
[Line No. 148] :: unary_expression ---> postfix_expression
[Line No. 148] :: cast_expression ---> unary_expression
[Line No. 148] :: multiplicative_expression ---> cast_expression
[Line No. 148] :: additive_expression ---> multiplicative_expression
[Line No. 148] :: shift_expression ---> additive_expression
[Line No. 148] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
[Line No. 148] :: postfix_expression ---> primary_expression
[Line No. 148] :: unary_expression ---> postfix_expression
[Line No. 148] :: cast_expression ---> unary_expression
[Line No. 148] :: multiplicative_expression ---> cast_expression
[Line No. 148] :: additive_expression ---> multiplicative_expression
[Line No. 148] :: shift_expression ---> shift_expression << additive_expression
[Line No. 148] :: relational_expression ---> shift_expression
[Line No. 148] :: equality_expression ---> relational_expression
[Line No. 148] :: AND_expression ---> equality_expression
[Line No. 148] :: exclusive_OR_expression ---> AND_expression
[Line No. 148] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 148] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 148] :: logical_OR_expression ---> logical_AND_expression
[Line No. 148] :: conditional_expression ---> logical_OR_expression
[Line No. 148] :: assignment_expression ---> conditional_expression
[Line No. 148] :: expression ---> assignment_expression
[Line No. 148] :: expression_opt ---> expression
[Line No. 148] :: expression_statement ---> expression_opt ;
[Line No. 148] :: statement ---> expression_statement
[Line No. 148] :: block_item ---> statement
[Line No. 148] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 149 getting parsed  --------------------

[Line No. 149] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 149] :: postfix_expression ---> primary_expression
[Line No. 149] :: unary_expression ---> postfix_expression
[Line No. 149] :: cast_expression ---> unary_expression
[Line No. 149] :: multiplicative_expression ---> cast_expression
[Line No. 149] :: additive_expression ---> multiplicative_expression
[Line No. 149] :: shift_expression ---> additive_expression
[Line No. 149] :: relational_expression ---> shift_expression
[Line No. 149] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 10
[Line No. 149] :: postfix_expression ---> primary_expression
[Line No. 149] :: unary_expression ---> postfix_expression
[Line No. 149] :: cast_expression ---> unary_expression
[Line No. 149] :: multiplicative_expression ---> cast_expression
[Line No. 149] :: additive_expression ---> multiplicative_expression
[Line No. 149] :: shift_expression ---> additive_expression
[Line No. 149] :: relational_expression ---> relational_expression < shift_expression
[Line No. 149] :: equality_expression ---> relational_expression
[Line No. 149] :: AND_expression ---> equality_expression
[Line No. 149] :: exclusive_OR_expression ---> AND_expression
[Line No. 149] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 149] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 149] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 149] :: postfix_expression ---> primary_expression
[Line No. 149] :: unary_expression ---> postfix_expression
[Line No. 149] :: cast_expression ---> unary_expression
[Line No. 149] :: multiplicative_expression ---> cast_expression
[Line No. 149] :: additive_expression ---> multiplicative_expression
[Line No. 149] :: shift_expression ---> additive_expression
[Line No. 149] :: relational_expression ---> shift_expression
[Line No. 149] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 149] :: postfix_expression ---> primary_expression
[Line No. 149] :: unary_expression ---> postfix_expression
[Line No. 149] :: cast_expression ---> unary_expression
[Line No. 149] :: multiplicative_expression ---> cast_expression
[Line No. 149] :: additive_expression ---> multiplicative_expression
[Line No. 149] :: shift_expression ---> additive_expression
[Line No. 149] :: relational_expression ---> relational_expression > shift_expression
[Line No. 149] :: equality_expression ---> relational_expression
[Line No. 149] :: AND_expression ---> equality_expression
[Line No. 149] :: exclusive_OR_expression ---> AND_expression
[Line No. 149] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 149] :: logical_AND_expression ---> logical_AND_expression && inclusive_OR_expression
[Line No. 149] :: logical_OR_expression ---> logical_AND_expression
[Line No. 149] :: conditional_expression ---> logical_OR_expression
[Line No. 149] :: assignment_expression ---> conditional_expression
[Line No. 149] :: expression ---> assignment_expression

-------------------- Line No. 150 getting parsed  --------------------

[Line No. 150] :: jump_statement ---> goto IDENTIFIER ;
				IDENTIFIER = some_label
[Line No. 150] :: statement ---> jump_statement

-------------------- Line No. 151 getting parsed  --------------------

[Line No. 151] :: selection_statement ---> if ( expression ) statement
[Line No. 151] :: statement ---> selection_statement
[Line No. 151] :: block_item ---> statement
[Line No. 151] :: block_item_list ---> block_item_list block_item
[Line No. 151] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 151] :: postfix_expression ---> primary_expression
[Line No. 151] :: unary_expression ---> postfix_expression
[Line No. 151] :: assignment_operator ---> =
[Line No. 151] :: unary_operator ---> ~
[Line No. 151] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = s
[Line No. 151] :: postfix_expression ---> primary_expression
[Line No. 151] :: unary_expression ---> postfix_expression
[Line No. 151] :: cast_expression ---> unary_expression
[Line No. 151] :: unary_expression ---> unary_operator cast_expression
[Line No. 151] :: cast_expression ---> unary_expression
[Line No. 151] :: multiplicative_expression ---> cast_expression
[Line No. 151] :: additive_expression ---> multiplicative_expression
[Line No. 151] :: shift_expression ---> additive_expression
[Line No. 151] :: relational_expression ---> shift_expression
[Line No. 151] :: equality_expression ---> relational_expression
[Line No. 151] :: AND_expression ---> equality_expression
[Line No. 151] :: exclusive_OR_expression ---> AND_expression
[Line No. 151] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 151] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 151] :: logical_OR_expression ---> logical_AND_expression
[Line No. 151] :: conditional_expression ---> logical_OR_expression
[Line No. 151] :: assignment_expression ---> conditional_expression
[Line No. 151] :: assignment_expression ---> unary_expression assignment_operator assignment_expression
[Line No. 151] :: expression ---> assignment_expression
[Line No. 151] :: expression_opt ---> expression
[Line No. 151] :: expression_statement ---> expression_opt ;
[Line No. 151] :: statement ---> expression_statement
[Line No. 151] :: block_item ---> statement
[Line No. 151] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 152 getting parsed  --------------------


-------------------- Line No. 153 getting parsed  --------------------

[Line No. 153] :: jump_statement ---> continue ;
[Line No. 153] :: statement ---> jump_statement
[Line No. 153] :: labeled_statement ---> IDENTIFIER : statement
				IDENTIFIER = some_label
[Line No. 153] :: statement ---> labeled_statement
[Line No. 153] :: block_item ---> statement
[Line No. 153] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 154 getting parsed  --------------------

[Line No. 154] :: block_item_list_opt ---> block_item_list
[Line No. 154] :: compound_statement ---> { block_item_list_opt }
[Line No. 154] :: statement ---> compound_statement
[Line No. 154] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 154] :: postfix_expression ---> primary_expression
[Line No. 154] :: unary_expression ---> postfix_expression
[Line No. 154] :: cast_expression ---> unary_expression
[Line No. 154] :: multiplicative_expression ---> cast_expression
[Line No. 154] :: additive_expression ---> multiplicative_expression
[Line No. 154] :: shift_expression ---> additive_expression
[Line No. 154] :: relational_expression ---> shift_expression
[Line No. 154] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
[Line No. 154] :: postfix_expression ---> primary_expression
[Line No. 154] :: unary_expression ---> postfix_expression
[Line No. 154] :: cast_expression ---> unary_expression
[Line No. 154] :: multiplicative_expression ---> cast_expression
[Line No. 154] :: additive_expression ---> multiplicative_expression
[Line No. 154] :: shift_expression ---> additive_expression
[Line No. 154] :: relational_expression ---> relational_expression > shift_expression
[Line No. 154] :: equality_expression ---> relational_expression
[Line No. 154] :: AND_expression ---> equality_expression
[Line No. 154] :: exclusive_OR_expression ---> AND_expression
[Line No. 154] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 154] :: logical_AND_expression ---> inclusive_OR_expression
[Line No. 154] :: primary_expression ---> IDENTIFIER
				IDENTIFIER = n2
[Line No. 154] :: postfix_expression ---> primary_expression
[Line No. 154] :: unary_expression ---> postfix_expression
[Line No. 154] :: cast_expression ---> unary_expression
[Line No. 154] :: multiplicative_expression ---> cast_expression
[Line No. 154] :: additive_expression ---> multiplicative_expression
[Line No. 154] :: shift_expression ---> additive_expression
[Line No. 154] :: relational_expression ---> shift_expression
[Line No. 154] :: primary_expression ---> INTEGER_CONSTANT
				INTEGER_CONSTANT = 10
[Line No. 154] :: postfix_expression ---> primary_expression
[Line No. 154] :: unary_expression ---> postfix_expression
[Line No. 154] :: cast_expression ---> unary_expression
[Line No. 154] :: multiplicative_expression ---> cast_expression
[Line No. 154] :: additive_expression ---> multiplicative_expression
[Line No. 154] :: shift_expression ---> additive_expression
[Line No. 154] :: relational_expression ---> relational_expression < shift_expression
[Line No. 154] :: equality_expression ---> relational_expression
[Line No. 154] :: AND_expression ---> equality_expression
[Line No. 154] :: exclusive_OR_expression ---> AND_expression
[Line No. 154] :: inclusive_OR_expression ---> exclusive_OR_expression
[Line No. 154] :: logical_AND_expression ---> logical_AND_expression && inclusive_OR_expression
[Line No. 154] :: logical_OR_expression ---> logical_AND_expression
[Line No. 154] :: conditional_expression ---> logical_OR_expression
[Line No. 154] :: assignment_expression ---> conditional_expression
[Line No. 154] :: expression ---> assignment_expression
[Line No. 154] :: iteration_statement ---> do statement while ( expression ) ;
[Line No. 154] :: statement ---> iteration_statement
[Line No. 154] :: block_item ---> statement
[Line No. 154] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 155 getting parsed  --------------------


-------------------- Line No. 156 getting parsed  --------------------

[Line No. 156] :: expression_opt ---> epsilon
[Line No. 156] :: jump_statement ---> return expression_opt ;
[Line No. 156] :: statement ---> jump_statement
[Line No. 156] :: block_item ---> statement
[Line No. 156] :: block_item_list ---> block_item_list block_item

-------------------- Line No. 157 getting parsed  --------------------

[Line No. 157] :: block_item_list_opt ---> block_item_list
[Line No. 157] :: compound_statement ---> { block_item_list_opt }
[Line No. 157] :: function_definition ---> declaration_specifiers declarator declaration_list_opt compound_statement
[Line No. 157] :: external_declaration ---> function_definition
[Line No. 157] :: translation_unit ---> translation_unit external_declaration
